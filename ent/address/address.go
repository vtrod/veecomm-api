// Code generated by ent, DO NOT EDIT.

package address

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the address type in the database.
	Label = "address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCep holds the string denoting the cep field in the database.
	FieldCep = "cep"
	// FieldLogradouro holds the string denoting the logradouro field in the database.
	FieldLogradouro = "logradouro"
	// FieldNumero holds the string denoting the numero field in the database.
	FieldNumero = "numero"
	// FieldComplemento holds the string denoting the complemento field in the database.
	FieldComplemento = "complemento"
	// FieldBairro holds the string denoting the bairro field in the database.
	FieldBairro = "bairro"
	// FieldCidade holds the string denoting the cidade field in the database.
	FieldCidade = "cidade"
	// FieldEstado holds the string denoting the estado field in the database.
	FieldEstado = "estado"
	// FieldIsDefault holds the string denoting the is_default field in the database.
	FieldIsDefault = "is_default"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// Table holds the table name of the address in the database.
	Table = "addresses"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "addresses"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "orders"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "orders"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "address_id"
)

// Columns holds all SQL columns for address fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldCep,
	FieldLogradouro,
	FieldNumero,
	FieldComplemento,
	FieldBairro,
	FieldCidade,
	FieldEstado,
	FieldIsDefault,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CepValidator is a validator for the "cep" field. It is called by the builders before save.
	CepValidator func(string) error
	// LogradouroValidator is a validator for the "logradouro" field. It is called by the builders before save.
	LogradouroValidator func(string) error
	// NumeroValidator is a validator for the "numero" field. It is called by the builders before save.
	NumeroValidator func(string) error
	// BairroValidator is a validator for the "bairro" field. It is called by the builders before save.
	BairroValidator func(string) error
	// CidadeValidator is a validator for the "cidade" field. It is called by the builders before save.
	CidadeValidator func(string) error
	// EstadoValidator is a validator for the "estado" field. It is called by the builders before save.
	EstadoValidator func(string) error
	// DefaultIsDefault holds the default value on creation for the "is_default" field.
	DefaultIsDefault bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Address queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCep orders the results by the cep field.
func ByCep(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCep, opts...).ToFunc()
}

// ByLogradouro orders the results by the logradouro field.
func ByLogradouro(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogradouro, opts...).ToFunc()
}

// ByNumero orders the results by the numero field.
func ByNumero(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumero, opts...).ToFunc()
}

// ByComplemento orders the results by the complemento field.
func ByComplemento(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComplemento, opts...).ToFunc()
}

// ByBairro orders the results by the bairro field.
func ByBairro(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBairro, opts...).ToFunc()
}

// ByCidade orders the results by the cidade field.
func ByCidade(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCidade, opts...).ToFunc()
}

// ByEstado orders the results by the estado field.
func ByEstado(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstado, opts...).ToFunc()
}

// ByIsDefault orders the results by the is_default field.
func ByIsDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDefault, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrdersCount orders the results by orders count.
func ByOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdersStep(), opts...)
	}
}

// ByOrders orders the results by orders terms.
func ByOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
	)
}
