// Code generated by ent, DO NOT EDIT.

package address

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vtrod/veecomm-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUserID, v))
}

// Cep applies equality check predicate on the "cep" field. It's identical to CepEQ.
func Cep(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCep, v))
}

// Logradouro applies equality check predicate on the "logradouro" field. It's identical to LogradouroEQ.
func Logradouro(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldLogradouro, v))
}

// Numero applies equality check predicate on the "numero" field. It's identical to NumeroEQ.
func Numero(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldNumero, v))
}

// Complemento applies equality check predicate on the "complemento" field. It's identical to ComplementoEQ.
func Complemento(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldComplemento, v))
}

// Bairro applies equality check predicate on the "bairro" field. It's identical to BairroEQ.
func Bairro(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldBairro, v))
}

// Cidade applies equality check predicate on the "cidade" field. It's identical to CidadeEQ.
func Cidade(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCidade, v))
}

// Estado applies equality check predicate on the "estado" field. It's identical to EstadoEQ.
func Estado(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldEstado, v))
}

// IsDefault applies equality check predicate on the "is_default" field. It's identical to IsDefaultEQ.
func IsDefault(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldIsDefault, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldUserID, v))
}

// CepEQ applies the EQ predicate on the "cep" field.
func CepEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCep, v))
}

// CepNEQ applies the NEQ predicate on the "cep" field.
func CepNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCep, v))
}

// CepIn applies the In predicate on the "cep" field.
func CepIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCep, vs...))
}

// CepNotIn applies the NotIn predicate on the "cep" field.
func CepNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCep, vs...))
}

// CepGT applies the GT predicate on the "cep" field.
func CepGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCep, v))
}

// CepGTE applies the GTE predicate on the "cep" field.
func CepGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCep, v))
}

// CepLT applies the LT predicate on the "cep" field.
func CepLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCep, v))
}

// CepLTE applies the LTE predicate on the "cep" field.
func CepLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCep, v))
}

// CepContains applies the Contains predicate on the "cep" field.
func CepContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldCep, v))
}

// CepHasPrefix applies the HasPrefix predicate on the "cep" field.
func CepHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldCep, v))
}

// CepHasSuffix applies the HasSuffix predicate on the "cep" field.
func CepHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldCep, v))
}

// CepEqualFold applies the EqualFold predicate on the "cep" field.
func CepEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldCep, v))
}

// CepContainsFold applies the ContainsFold predicate on the "cep" field.
func CepContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldCep, v))
}

// LogradouroEQ applies the EQ predicate on the "logradouro" field.
func LogradouroEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldLogradouro, v))
}

// LogradouroNEQ applies the NEQ predicate on the "logradouro" field.
func LogradouroNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldLogradouro, v))
}

// LogradouroIn applies the In predicate on the "logradouro" field.
func LogradouroIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldLogradouro, vs...))
}

// LogradouroNotIn applies the NotIn predicate on the "logradouro" field.
func LogradouroNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldLogradouro, vs...))
}

// LogradouroGT applies the GT predicate on the "logradouro" field.
func LogradouroGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldLogradouro, v))
}

// LogradouroGTE applies the GTE predicate on the "logradouro" field.
func LogradouroGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldLogradouro, v))
}

// LogradouroLT applies the LT predicate on the "logradouro" field.
func LogradouroLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldLogradouro, v))
}

// LogradouroLTE applies the LTE predicate on the "logradouro" field.
func LogradouroLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldLogradouro, v))
}

// LogradouroContains applies the Contains predicate on the "logradouro" field.
func LogradouroContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldLogradouro, v))
}

// LogradouroHasPrefix applies the HasPrefix predicate on the "logradouro" field.
func LogradouroHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldLogradouro, v))
}

// LogradouroHasSuffix applies the HasSuffix predicate on the "logradouro" field.
func LogradouroHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldLogradouro, v))
}

// LogradouroEqualFold applies the EqualFold predicate on the "logradouro" field.
func LogradouroEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldLogradouro, v))
}

// LogradouroContainsFold applies the ContainsFold predicate on the "logradouro" field.
func LogradouroContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldLogradouro, v))
}

// NumeroEQ applies the EQ predicate on the "numero" field.
func NumeroEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldNumero, v))
}

// NumeroNEQ applies the NEQ predicate on the "numero" field.
func NumeroNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldNumero, v))
}

// NumeroIn applies the In predicate on the "numero" field.
func NumeroIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldNumero, vs...))
}

// NumeroNotIn applies the NotIn predicate on the "numero" field.
func NumeroNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldNumero, vs...))
}

// NumeroGT applies the GT predicate on the "numero" field.
func NumeroGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldNumero, v))
}

// NumeroGTE applies the GTE predicate on the "numero" field.
func NumeroGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldNumero, v))
}

// NumeroLT applies the LT predicate on the "numero" field.
func NumeroLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldNumero, v))
}

// NumeroLTE applies the LTE predicate on the "numero" field.
func NumeroLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldNumero, v))
}

// NumeroContains applies the Contains predicate on the "numero" field.
func NumeroContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldNumero, v))
}

// NumeroHasPrefix applies the HasPrefix predicate on the "numero" field.
func NumeroHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldNumero, v))
}

// NumeroHasSuffix applies the HasSuffix predicate on the "numero" field.
func NumeroHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldNumero, v))
}

// NumeroEqualFold applies the EqualFold predicate on the "numero" field.
func NumeroEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldNumero, v))
}

// NumeroContainsFold applies the ContainsFold predicate on the "numero" field.
func NumeroContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldNumero, v))
}

// ComplementoEQ applies the EQ predicate on the "complemento" field.
func ComplementoEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldComplemento, v))
}

// ComplementoNEQ applies the NEQ predicate on the "complemento" field.
func ComplementoNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldComplemento, v))
}

// ComplementoIn applies the In predicate on the "complemento" field.
func ComplementoIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldComplemento, vs...))
}

// ComplementoNotIn applies the NotIn predicate on the "complemento" field.
func ComplementoNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldComplemento, vs...))
}

// ComplementoGT applies the GT predicate on the "complemento" field.
func ComplementoGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldComplemento, v))
}

// ComplementoGTE applies the GTE predicate on the "complemento" field.
func ComplementoGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldComplemento, v))
}

// ComplementoLT applies the LT predicate on the "complemento" field.
func ComplementoLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldComplemento, v))
}

// ComplementoLTE applies the LTE predicate on the "complemento" field.
func ComplementoLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldComplemento, v))
}

// ComplementoContains applies the Contains predicate on the "complemento" field.
func ComplementoContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldComplemento, v))
}

// ComplementoHasPrefix applies the HasPrefix predicate on the "complemento" field.
func ComplementoHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldComplemento, v))
}

// ComplementoHasSuffix applies the HasSuffix predicate on the "complemento" field.
func ComplementoHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldComplemento, v))
}

// ComplementoIsNil applies the IsNil predicate on the "complemento" field.
func ComplementoIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldComplemento))
}

// ComplementoNotNil applies the NotNil predicate on the "complemento" field.
func ComplementoNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldComplemento))
}

// ComplementoEqualFold applies the EqualFold predicate on the "complemento" field.
func ComplementoEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldComplemento, v))
}

// ComplementoContainsFold applies the ContainsFold predicate on the "complemento" field.
func ComplementoContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldComplemento, v))
}

// BairroEQ applies the EQ predicate on the "bairro" field.
func BairroEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldBairro, v))
}

// BairroNEQ applies the NEQ predicate on the "bairro" field.
func BairroNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldBairro, v))
}

// BairroIn applies the In predicate on the "bairro" field.
func BairroIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldBairro, vs...))
}

// BairroNotIn applies the NotIn predicate on the "bairro" field.
func BairroNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldBairro, vs...))
}

// BairroGT applies the GT predicate on the "bairro" field.
func BairroGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldBairro, v))
}

// BairroGTE applies the GTE predicate on the "bairro" field.
func BairroGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldBairro, v))
}

// BairroLT applies the LT predicate on the "bairro" field.
func BairroLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldBairro, v))
}

// BairroLTE applies the LTE predicate on the "bairro" field.
func BairroLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldBairro, v))
}

// BairroContains applies the Contains predicate on the "bairro" field.
func BairroContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldBairro, v))
}

// BairroHasPrefix applies the HasPrefix predicate on the "bairro" field.
func BairroHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldBairro, v))
}

// BairroHasSuffix applies the HasSuffix predicate on the "bairro" field.
func BairroHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldBairro, v))
}

// BairroEqualFold applies the EqualFold predicate on the "bairro" field.
func BairroEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldBairro, v))
}

// BairroContainsFold applies the ContainsFold predicate on the "bairro" field.
func BairroContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldBairro, v))
}

// CidadeEQ applies the EQ predicate on the "cidade" field.
func CidadeEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCidade, v))
}

// CidadeNEQ applies the NEQ predicate on the "cidade" field.
func CidadeNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCidade, v))
}

// CidadeIn applies the In predicate on the "cidade" field.
func CidadeIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCidade, vs...))
}

// CidadeNotIn applies the NotIn predicate on the "cidade" field.
func CidadeNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCidade, vs...))
}

// CidadeGT applies the GT predicate on the "cidade" field.
func CidadeGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCidade, v))
}

// CidadeGTE applies the GTE predicate on the "cidade" field.
func CidadeGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCidade, v))
}

// CidadeLT applies the LT predicate on the "cidade" field.
func CidadeLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCidade, v))
}

// CidadeLTE applies the LTE predicate on the "cidade" field.
func CidadeLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCidade, v))
}

// CidadeContains applies the Contains predicate on the "cidade" field.
func CidadeContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldCidade, v))
}

// CidadeHasPrefix applies the HasPrefix predicate on the "cidade" field.
func CidadeHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldCidade, v))
}

// CidadeHasSuffix applies the HasSuffix predicate on the "cidade" field.
func CidadeHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldCidade, v))
}

// CidadeEqualFold applies the EqualFold predicate on the "cidade" field.
func CidadeEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldCidade, v))
}

// CidadeContainsFold applies the ContainsFold predicate on the "cidade" field.
func CidadeContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldCidade, v))
}

// EstadoEQ applies the EQ predicate on the "estado" field.
func EstadoEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldEstado, v))
}

// EstadoNEQ applies the NEQ predicate on the "estado" field.
func EstadoNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldEstado, v))
}

// EstadoIn applies the In predicate on the "estado" field.
func EstadoIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldEstado, vs...))
}

// EstadoNotIn applies the NotIn predicate on the "estado" field.
func EstadoNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldEstado, vs...))
}

// EstadoGT applies the GT predicate on the "estado" field.
func EstadoGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldEstado, v))
}

// EstadoGTE applies the GTE predicate on the "estado" field.
func EstadoGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldEstado, v))
}

// EstadoLT applies the LT predicate on the "estado" field.
func EstadoLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldEstado, v))
}

// EstadoLTE applies the LTE predicate on the "estado" field.
func EstadoLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldEstado, v))
}

// EstadoContains applies the Contains predicate on the "estado" field.
func EstadoContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldEstado, v))
}

// EstadoHasPrefix applies the HasPrefix predicate on the "estado" field.
func EstadoHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldEstado, v))
}

// EstadoHasSuffix applies the HasSuffix predicate on the "estado" field.
func EstadoHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldEstado, v))
}

// EstadoEqualFold applies the EqualFold predicate on the "estado" field.
func EstadoEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldEstado, v))
}

// EstadoContainsFold applies the ContainsFold predicate on the "estado" field.
func EstadoContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldEstado, v))
}

// IsDefaultEQ applies the EQ predicate on the "is_default" field.
func IsDefaultEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldIsDefault, v))
}

// IsDefaultNEQ applies the NEQ predicate on the "is_default" field.
func IsDefaultNEQ(v bool) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldIsDefault, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(sql.NotPredicates(p))
}
