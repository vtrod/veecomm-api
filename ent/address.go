// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vtrod/veecomm-api/ent/address"
	"github.com/vtrod/veecomm-api/ent/user"
)

// Address is the model entity for the Address schema.
type Address struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Cep holds the value of the "cep" field.
	Cep string `json:"cep,omitempty"`
	// Logradouro holds the value of the "logradouro" field.
	Logradouro string `json:"logradouro,omitempty"`
	// Numero holds the value of the "numero" field.
	Numero string `json:"numero,omitempty"`
	// Complemento holds the value of the "complemento" field.
	Complemento string `json:"complemento,omitempty"`
	// Bairro holds the value of the "bairro" field.
	Bairro string `json:"bairro,omitempty"`
	// Cidade holds the value of the "cidade" field.
	Cidade string `json:"cidade,omitempty"`
	// Estado holds the value of the "estado" field.
	Estado string `json:"estado,omitempty"`
	// IsDefault holds the value of the "is_default" field.
	IsDefault bool `json:"is_default,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressQuery when eager-loading is set.
	Edges        AddressEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AddressEdges holds the relations/edges for other nodes in the graph.
type AddressEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AddressEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[1] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Address) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case address.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case address.FieldID, address.FieldUserID, address.FieldCep, address.FieldLogradouro, address.FieldNumero, address.FieldComplemento, address.FieldBairro, address.FieldCidade, address.FieldEstado:
			values[i] = new(sql.NullString)
		case address.FieldCreatedAt, address.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Address fields.
func (a *Address) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case address.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				a.UserID = value.String
			}
		case address.FieldCep:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cep", values[i])
			} else if value.Valid {
				a.Cep = value.String
			}
		case address.FieldLogradouro:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logradouro", values[i])
			} else if value.Valid {
				a.Logradouro = value.String
			}
		case address.FieldNumero:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field numero", values[i])
			} else if value.Valid {
				a.Numero = value.String
			}
		case address.FieldComplemento:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field complemento", values[i])
			} else if value.Valid {
				a.Complemento = value.String
			}
		case address.FieldBairro:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bairro", values[i])
			} else if value.Valid {
				a.Bairro = value.String
			}
		case address.FieldCidade:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cidade", values[i])
			} else if value.Valid {
				a.Cidade = value.String
			}
		case address.FieldEstado:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field estado", values[i])
			} else if value.Valid {
				a.Estado = value.String
			}
		case address.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				a.IsDefault = value.Bool
			}
		case address.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case address.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Address.
// This includes values selected through modifiers, order, etc.
func (a *Address) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Address entity.
func (a *Address) QueryUser() *UserQuery {
	return NewAddressClient(a.config).QueryUser(a)
}

// QueryOrders queries the "orders" edge of the Address entity.
func (a *Address) QueryOrders() *OrderQuery {
	return NewAddressClient(a.config).QueryOrders(a)
}

// Update returns a builder for updating this Address.
// Note that you need to call Address.Unwrap() before calling this method if this Address
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Address) Update() *AddressUpdateOne {
	return NewAddressClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Address entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Address) Unwrap() *Address {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Address is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Address) String() string {
	var builder strings.Builder
	builder.WriteString("Address(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("user_id=")
	builder.WriteString(a.UserID)
	builder.WriteString(", ")
	builder.WriteString("cep=")
	builder.WriteString(a.Cep)
	builder.WriteString(", ")
	builder.WriteString("logradouro=")
	builder.WriteString(a.Logradouro)
	builder.WriteString(", ")
	builder.WriteString("numero=")
	builder.WriteString(a.Numero)
	builder.WriteString(", ")
	builder.WriteString("complemento=")
	builder.WriteString(a.Complemento)
	builder.WriteString(", ")
	builder.WriteString("bairro=")
	builder.WriteString(a.Bairro)
	builder.WriteString(", ")
	builder.WriteString("cidade=")
	builder.WriteString(a.Cidade)
	builder.WriteString(", ")
	builder.WriteString("estado=")
	builder.WriteString(a.Estado)
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", a.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Addresses is a parsable slice of Address.
type Addresses []*Address
