// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/vtrod/veecomm-api/ent/avaliation"
	"github.com/vtrod/veecomm-api/ent/predicate"
	"github.com/vtrod/veecomm-api/ent/product"
	"github.com/vtrod/veecomm-api/ent/user"
)

// AvaliationUpdate is the builder for updating Avaliation entities.
type AvaliationUpdate struct {
	config
	hooks    []Hook
	mutation *AvaliationMutation
}

// Where appends a list predicates to the AvaliationUpdate builder.
func (au *AvaliationUpdate) Where(ps ...predicate.Avaliation) *AvaliationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetProductID sets the "product_id" field.
func (au *AvaliationUpdate) SetProductID(s string) *AvaliationUpdate {
	au.mutation.SetProductID(s)
	return au
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (au *AvaliationUpdate) SetNillableProductID(s *string) *AvaliationUpdate {
	if s != nil {
		au.SetProductID(*s)
	}
	return au
}

// ClearProductID clears the value of the "product_id" field.
func (au *AvaliationUpdate) ClearProductID() *AvaliationUpdate {
	au.mutation.ClearProductID()
	return au
}

// SetUserID sets the "user_id" field.
func (au *AvaliationUpdate) SetUserID(s string) *AvaliationUpdate {
	au.mutation.SetUserID(s)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AvaliationUpdate) SetNillableUserID(s *string) *AvaliationUpdate {
	if s != nil {
		au.SetUserID(*s)
	}
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *AvaliationUpdate) ClearUserID() *AvaliationUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetUserName sets the "user_name" field.
func (au *AvaliationUpdate) SetUserName(s string) *AvaliationUpdate {
	au.mutation.SetUserName(s)
	return au
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (au *AvaliationUpdate) SetNillableUserName(s *string) *AvaliationUpdate {
	if s != nil {
		au.SetUserName(*s)
	}
	return au
}

// SetRating sets the "rating" field.
func (au *AvaliationUpdate) SetRating(i int) *AvaliationUpdate {
	au.mutation.ResetRating()
	au.mutation.SetRating(i)
	return au
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (au *AvaliationUpdate) SetNillableRating(i *int) *AvaliationUpdate {
	if i != nil {
		au.SetRating(*i)
	}
	return au
}

// AddRating adds i to the "rating" field.
func (au *AvaliationUpdate) AddRating(i int) *AvaliationUpdate {
	au.mutation.AddRating(i)
	return au
}

// SetComment sets the "comment" field.
func (au *AvaliationUpdate) SetComment(s string) *AvaliationUpdate {
	au.mutation.SetComment(s)
	return au
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (au *AvaliationUpdate) SetNillableComment(s *string) *AvaliationUpdate {
	if s != nil {
		au.SetComment(*s)
	}
	return au
}

// SetDate sets the "date" field.
func (au *AvaliationUpdate) SetDate(t time.Time) *AvaliationUpdate {
	au.mutation.SetDate(t)
	return au
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (au *AvaliationUpdate) SetNillableDate(t *time.Time) *AvaliationUpdate {
	if t != nil {
		au.SetDate(*t)
	}
	return au
}

// SetImages sets the "images" field.
func (au *AvaliationUpdate) SetImages(s []string) *AvaliationUpdate {
	au.mutation.SetImages(s)
	return au
}

// AppendImages appends s to the "images" field.
func (au *AvaliationUpdate) AppendImages(s []string) *AvaliationUpdate {
	au.mutation.AppendImages(s)
	return au
}

// ClearImages clears the value of the "images" field.
func (au *AvaliationUpdate) ClearImages() *AvaliationUpdate {
	au.mutation.ClearImages()
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AvaliationUpdate) SetCreatedAt(t time.Time) *AvaliationUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AvaliationUpdate) SetNillableCreatedAt(t *time.Time) *AvaliationUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AvaliationUpdate) SetUpdatedAt(t time.Time) *AvaliationUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetProduct sets the "product" edge to the Product entity.
func (au *AvaliationUpdate) SetProduct(p *Product) *AvaliationUpdate {
	return au.SetProductID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (au *AvaliationUpdate) SetUser(u *User) *AvaliationUpdate {
	return au.SetUserID(u.ID)
}

// Mutation returns the AvaliationMutation object of the builder.
func (au *AvaliationUpdate) Mutation() *AvaliationMutation {
	return au.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (au *AvaliationUpdate) ClearProduct() *AvaliationUpdate {
	au.mutation.ClearProduct()
	return au
}

// ClearUser clears the "user" edge to the User entity.
func (au *AvaliationUpdate) ClearUser() *AvaliationUpdate {
	au.mutation.ClearUser()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AvaliationUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AvaliationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AvaliationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AvaliationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AvaliationUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := avaliation.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AvaliationUpdate) check() error {
	if v, ok := au.mutation.UserName(); ok {
		if err := avaliation.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`ent: validator failed for field "Avaliation.user_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.Rating(); ok {
		if err := avaliation.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Avaliation.rating": %w`, err)}
		}
	}
	if v, ok := au.mutation.Comment(); ok {
		if err := avaliation.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Avaliation.comment": %w`, err)}
		}
	}
	return nil
}

func (au *AvaliationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(avaliation.Table, avaliation.Columns, sqlgraph.NewFieldSpec(avaliation.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UserName(); ok {
		_spec.SetField(avaliation.FieldUserName, field.TypeString, value)
	}
	if value, ok := au.mutation.Rating(); ok {
		_spec.SetField(avaliation.FieldRating, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedRating(); ok {
		_spec.AddField(avaliation.FieldRating, field.TypeInt, value)
	}
	if value, ok := au.mutation.Comment(); ok {
		_spec.SetField(avaliation.FieldComment, field.TypeString, value)
	}
	if value, ok := au.mutation.Date(); ok {
		_spec.SetField(avaliation.FieldDate, field.TypeTime, value)
	}
	if value, ok := au.mutation.Images(); ok {
		_spec.SetField(avaliation.FieldImages, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, avaliation.FieldImages, value)
		})
	}
	if au.mutation.ImagesCleared() {
		_spec.ClearField(avaliation.FieldImages, field.TypeJSON)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(avaliation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(avaliation.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   avaliation.ProductTable,
			Columns: []string{avaliation.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   avaliation.ProductTable,
			Columns: []string{avaliation.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   avaliation.UserTable,
			Columns: []string{avaliation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   avaliation.UserTable,
			Columns: []string{avaliation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{avaliation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AvaliationUpdateOne is the builder for updating a single Avaliation entity.
type AvaliationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AvaliationMutation
}

// SetProductID sets the "product_id" field.
func (auo *AvaliationUpdateOne) SetProductID(s string) *AvaliationUpdateOne {
	auo.mutation.SetProductID(s)
	return auo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (auo *AvaliationUpdateOne) SetNillableProductID(s *string) *AvaliationUpdateOne {
	if s != nil {
		auo.SetProductID(*s)
	}
	return auo
}

// ClearProductID clears the value of the "product_id" field.
func (auo *AvaliationUpdateOne) ClearProductID() *AvaliationUpdateOne {
	auo.mutation.ClearProductID()
	return auo
}

// SetUserID sets the "user_id" field.
func (auo *AvaliationUpdateOne) SetUserID(s string) *AvaliationUpdateOne {
	auo.mutation.SetUserID(s)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AvaliationUpdateOne) SetNillableUserID(s *string) *AvaliationUpdateOne {
	if s != nil {
		auo.SetUserID(*s)
	}
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *AvaliationUpdateOne) ClearUserID() *AvaliationUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetUserName sets the "user_name" field.
func (auo *AvaliationUpdateOne) SetUserName(s string) *AvaliationUpdateOne {
	auo.mutation.SetUserName(s)
	return auo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (auo *AvaliationUpdateOne) SetNillableUserName(s *string) *AvaliationUpdateOne {
	if s != nil {
		auo.SetUserName(*s)
	}
	return auo
}

// SetRating sets the "rating" field.
func (auo *AvaliationUpdateOne) SetRating(i int) *AvaliationUpdateOne {
	auo.mutation.ResetRating()
	auo.mutation.SetRating(i)
	return auo
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (auo *AvaliationUpdateOne) SetNillableRating(i *int) *AvaliationUpdateOne {
	if i != nil {
		auo.SetRating(*i)
	}
	return auo
}

// AddRating adds i to the "rating" field.
func (auo *AvaliationUpdateOne) AddRating(i int) *AvaliationUpdateOne {
	auo.mutation.AddRating(i)
	return auo
}

// SetComment sets the "comment" field.
func (auo *AvaliationUpdateOne) SetComment(s string) *AvaliationUpdateOne {
	auo.mutation.SetComment(s)
	return auo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (auo *AvaliationUpdateOne) SetNillableComment(s *string) *AvaliationUpdateOne {
	if s != nil {
		auo.SetComment(*s)
	}
	return auo
}

// SetDate sets the "date" field.
func (auo *AvaliationUpdateOne) SetDate(t time.Time) *AvaliationUpdateOne {
	auo.mutation.SetDate(t)
	return auo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (auo *AvaliationUpdateOne) SetNillableDate(t *time.Time) *AvaliationUpdateOne {
	if t != nil {
		auo.SetDate(*t)
	}
	return auo
}

// SetImages sets the "images" field.
func (auo *AvaliationUpdateOne) SetImages(s []string) *AvaliationUpdateOne {
	auo.mutation.SetImages(s)
	return auo
}

// AppendImages appends s to the "images" field.
func (auo *AvaliationUpdateOne) AppendImages(s []string) *AvaliationUpdateOne {
	auo.mutation.AppendImages(s)
	return auo
}

// ClearImages clears the value of the "images" field.
func (auo *AvaliationUpdateOne) ClearImages() *AvaliationUpdateOne {
	auo.mutation.ClearImages()
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AvaliationUpdateOne) SetCreatedAt(t time.Time) *AvaliationUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AvaliationUpdateOne) SetNillableCreatedAt(t *time.Time) *AvaliationUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AvaliationUpdateOne) SetUpdatedAt(t time.Time) *AvaliationUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetProduct sets the "product" edge to the Product entity.
func (auo *AvaliationUpdateOne) SetProduct(p *Product) *AvaliationUpdateOne {
	return auo.SetProductID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (auo *AvaliationUpdateOne) SetUser(u *User) *AvaliationUpdateOne {
	return auo.SetUserID(u.ID)
}

// Mutation returns the AvaliationMutation object of the builder.
func (auo *AvaliationUpdateOne) Mutation() *AvaliationMutation {
	return auo.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (auo *AvaliationUpdateOne) ClearProduct() *AvaliationUpdateOne {
	auo.mutation.ClearProduct()
	return auo
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AvaliationUpdateOne) ClearUser() *AvaliationUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// Where appends a list predicates to the AvaliationUpdate builder.
func (auo *AvaliationUpdateOne) Where(ps ...predicate.Avaliation) *AvaliationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AvaliationUpdateOne) Select(field string, fields ...string) *AvaliationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Avaliation entity.
func (auo *AvaliationUpdateOne) Save(ctx context.Context) (*Avaliation, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AvaliationUpdateOne) SaveX(ctx context.Context) *Avaliation {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AvaliationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AvaliationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AvaliationUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := avaliation.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AvaliationUpdateOne) check() error {
	if v, ok := auo.mutation.UserName(); ok {
		if err := avaliation.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`ent: validator failed for field "Avaliation.user_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Rating(); ok {
		if err := avaliation.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Avaliation.rating": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Comment(); ok {
		if err := avaliation.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Avaliation.comment": %w`, err)}
		}
	}
	return nil
}

func (auo *AvaliationUpdateOne) sqlSave(ctx context.Context) (_node *Avaliation, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(avaliation.Table, avaliation.Columns, sqlgraph.NewFieldSpec(avaliation.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Avaliation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, avaliation.FieldID)
		for _, f := range fields {
			if !avaliation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != avaliation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UserName(); ok {
		_spec.SetField(avaliation.FieldUserName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Rating(); ok {
		_spec.SetField(avaliation.FieldRating, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedRating(); ok {
		_spec.AddField(avaliation.FieldRating, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Comment(); ok {
		_spec.SetField(avaliation.FieldComment, field.TypeString, value)
	}
	if value, ok := auo.mutation.Date(); ok {
		_spec.SetField(avaliation.FieldDate, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Images(); ok {
		_spec.SetField(avaliation.FieldImages, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, avaliation.FieldImages, value)
		})
	}
	if auo.mutation.ImagesCleared() {
		_spec.ClearField(avaliation.FieldImages, field.TypeJSON)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(avaliation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(avaliation.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   avaliation.ProductTable,
			Columns: []string{avaliation.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   avaliation.ProductTable,
			Columns: []string{avaliation.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   avaliation.UserTable,
			Columns: []string{avaliation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   avaliation.UserTable,
			Columns: []string{avaliation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Avaliation{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{avaliation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
