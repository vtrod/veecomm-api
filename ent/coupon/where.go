// Code generated by ent, DO NOT EDIT.

package coupon

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/vtrod/veecomm-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContainsFold(FieldID, id))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCode, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldValue, v))
}

// MinPurchase applies equality check predicate on the "min_purchase" field. It's identical to MinPurchaseEQ.
func MinPurchase(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldMinPurchase, v))
}

// UsageLimit applies equality check predicate on the "usage_limit" field. It's identical to UsageLimitEQ.
func UsageLimit(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUsageLimit, v))
}

// UsedCount applies equality check predicate on the "used_count" field. It's identical to UsedCountEQ.
func UsedCount(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUsedCount, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldExpiresAt, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldActive, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUpdatedAt, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Coupon {
	return predicate.Coupon(sql.FieldContainsFold(FieldCode, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldType, vs...))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldValue, v))
}

// MinPurchaseEQ applies the EQ predicate on the "min_purchase" field.
func MinPurchaseEQ(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldMinPurchase, v))
}

// MinPurchaseNEQ applies the NEQ predicate on the "min_purchase" field.
func MinPurchaseNEQ(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldMinPurchase, v))
}

// MinPurchaseIn applies the In predicate on the "min_purchase" field.
func MinPurchaseIn(vs ...float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldMinPurchase, vs...))
}

// MinPurchaseNotIn applies the NotIn predicate on the "min_purchase" field.
func MinPurchaseNotIn(vs ...float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldMinPurchase, vs...))
}

// MinPurchaseGT applies the GT predicate on the "min_purchase" field.
func MinPurchaseGT(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldMinPurchase, v))
}

// MinPurchaseGTE applies the GTE predicate on the "min_purchase" field.
func MinPurchaseGTE(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldMinPurchase, v))
}

// MinPurchaseLT applies the LT predicate on the "min_purchase" field.
func MinPurchaseLT(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldMinPurchase, v))
}

// MinPurchaseLTE applies the LTE predicate on the "min_purchase" field.
func MinPurchaseLTE(v float64) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldMinPurchase, v))
}

// MinPurchaseIsNil applies the IsNil predicate on the "min_purchase" field.
func MinPurchaseIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldMinPurchase))
}

// MinPurchaseNotNil applies the NotNil predicate on the "min_purchase" field.
func MinPurchaseNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldMinPurchase))
}

// UsageLimitEQ applies the EQ predicate on the "usage_limit" field.
func UsageLimitEQ(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUsageLimit, v))
}

// UsageLimitNEQ applies the NEQ predicate on the "usage_limit" field.
func UsageLimitNEQ(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldUsageLimit, v))
}

// UsageLimitIn applies the In predicate on the "usage_limit" field.
func UsageLimitIn(vs ...int) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldUsageLimit, vs...))
}

// UsageLimitNotIn applies the NotIn predicate on the "usage_limit" field.
func UsageLimitNotIn(vs ...int) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldUsageLimit, vs...))
}

// UsageLimitGT applies the GT predicate on the "usage_limit" field.
func UsageLimitGT(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldUsageLimit, v))
}

// UsageLimitGTE applies the GTE predicate on the "usage_limit" field.
func UsageLimitGTE(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldUsageLimit, v))
}

// UsageLimitLT applies the LT predicate on the "usage_limit" field.
func UsageLimitLT(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldUsageLimit, v))
}

// UsageLimitLTE applies the LTE predicate on the "usage_limit" field.
func UsageLimitLTE(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldUsageLimit, v))
}

// UsageLimitIsNil applies the IsNil predicate on the "usage_limit" field.
func UsageLimitIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldUsageLimit))
}

// UsageLimitNotNil applies the NotNil predicate on the "usage_limit" field.
func UsageLimitNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldUsageLimit))
}

// UsedCountEQ applies the EQ predicate on the "used_count" field.
func UsedCountEQ(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUsedCount, v))
}

// UsedCountNEQ applies the NEQ predicate on the "used_count" field.
func UsedCountNEQ(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldUsedCount, v))
}

// UsedCountIn applies the In predicate on the "used_count" field.
func UsedCountIn(vs ...int) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldUsedCount, vs...))
}

// UsedCountNotIn applies the NotIn predicate on the "used_count" field.
func UsedCountNotIn(vs ...int) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldUsedCount, vs...))
}

// UsedCountGT applies the GT predicate on the "used_count" field.
func UsedCountGT(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldUsedCount, v))
}

// UsedCountGTE applies the GTE predicate on the "used_count" field.
func UsedCountGTE(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldUsedCount, v))
}

// UsedCountLT applies the LT predicate on the "used_count" field.
func UsedCountLT(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldUsedCount, v))
}

// UsedCountLTE applies the LTE predicate on the "used_count" field.
func UsedCountLTE(v int) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldUsedCount, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.Coupon {
	return predicate.Coupon(sql.FieldNotNull(FieldExpiresAt))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Coupon {
	return predicate.Coupon(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Coupon) predicate.Coupon {
	return predicate.Coupon(sql.NotPredicates(p))
}
