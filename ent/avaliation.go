// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vtrod/veecomm-api/ent/avaliation"
	"github.com/vtrod/veecomm-api/ent/product"
	"github.com/vtrod/veecomm-api/ent/user"
)

// Avaliation is the model entity for the Avaliation schema.
type Avaliation struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID string `json:"product_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// UserName holds the value of the "user_name" field.
	UserName string `json:"user_name,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating int `json:"rating,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Images holds the value of the "images" field.
	Images []string `json:"images,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AvaliationQuery when eager-loading is set.
	Edges        AvaliationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AvaliationEdges holds the relations/edges for other nodes in the graph.
type AvaliationEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AvaliationEdges) ProductOrErr() (*Product, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AvaliationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Avaliation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case avaliation.FieldImages:
			values[i] = new([]byte)
		case avaliation.FieldRating:
			values[i] = new(sql.NullInt64)
		case avaliation.FieldID, avaliation.FieldProductID, avaliation.FieldUserID, avaliation.FieldUserName, avaliation.FieldComment:
			values[i] = new(sql.NullString)
		case avaliation.FieldDate, avaliation.FieldCreatedAt, avaliation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Avaliation fields.
func (a *Avaliation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case avaliation.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case avaliation.FieldProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				a.ProductID = value.String
			}
		case avaliation.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				a.UserID = value.String
			}
		case avaliation.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				a.UserName = value.String
			}
		case avaliation.FieldRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				a.Rating = int(value.Int64)
			}
		case avaliation.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				a.Comment = value.String
			}
		case avaliation.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				a.Date = value.Time
			}
		case avaliation.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case avaliation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case avaliation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Avaliation.
// This includes values selected through modifiers, order, etc.
func (a *Avaliation) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the Avaliation entity.
func (a *Avaliation) QueryProduct() *ProductQuery {
	return NewAvaliationClient(a.config).QueryProduct(a)
}

// QueryUser queries the "user" edge of the Avaliation entity.
func (a *Avaliation) QueryUser() *UserQuery {
	return NewAvaliationClient(a.config).QueryUser(a)
}

// Update returns a builder for updating this Avaliation.
// Note that you need to call Avaliation.Unwrap() before calling this method if this Avaliation
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Avaliation) Update() *AvaliationUpdateOne {
	return NewAvaliationClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Avaliation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Avaliation) Unwrap() *Avaliation {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Avaliation is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Avaliation) String() string {
	var builder strings.Builder
	builder.WriteString("Avaliation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("product_id=")
	builder.WriteString(a.ProductID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(a.UserID)
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(a.UserName)
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", a.Rating))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(a.Comment)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(a.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", a.Images))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Avaliations is a parsable slice of Avaliation.
type Avaliations []*Avaliation
