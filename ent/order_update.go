// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vtrod/veecomm-api/ent/address"
	"github.com/vtrod/veecomm-api/ent/order"
	"github.com/vtrod/veecomm-api/ent/orderitem"
	"github.com/vtrod/veecomm-api/ent/predicate"
	"github.com/vtrod/veecomm-api/ent/user"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUserID sets the "user_id" field.
func (ou *OrderUpdate) SetUserID(s string) *OrderUpdate {
	ou.mutation.SetUserID(s)
	return ou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUserID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetUserID(*s)
	}
	return ou
}

// ClearUserID clears the value of the "user_id" field.
func (ou *OrderUpdate) ClearUserID() *OrderUpdate {
	ou.mutation.ClearUserID()
	return ou
}

// SetDate sets the "date" field.
func (ou *OrderUpdate) SetDate(t time.Time) *OrderUpdate {
	ou.mutation.SetDate(t)
	return ou
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDate(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDate(*t)
	}
	return ou
}

// SetTotal sets the "total" field.
func (ou *OrderUpdate) SetTotal(f float64) *OrderUpdate {
	ou.mutation.ResetTotal()
	ou.mutation.SetTotal(f)
	return ou
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTotal(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetTotal(*f)
	}
	return ou
}

// AddTotal adds f to the "total" field.
func (ou *OrderUpdate) AddTotal(f float64) *OrderUpdate {
	ou.mutation.AddTotal(f)
	return ou
}

// SetShipping sets the "shipping" field.
func (ou *OrderUpdate) SetShipping(f float64) *OrderUpdate {
	ou.mutation.ResetShipping()
	ou.mutation.SetShipping(f)
	return ou
}

// SetNillableShipping sets the "shipping" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShipping(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetShipping(*f)
	}
	return ou
}

// AddShipping adds f to the "shipping" field.
func (ou *OrderUpdate) AddShipping(f float64) *OrderUpdate {
	ou.mutation.AddShipping(f)
	return ou
}

// SetDiscount sets the "discount" field.
func (ou *OrderUpdate) SetDiscount(f float64) *OrderUpdate {
	ou.mutation.ResetDiscount()
	ou.mutation.SetDiscount(f)
	return ou
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDiscount(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetDiscount(*f)
	}
	return ou
}

// AddDiscount adds f to the "discount" field.
func (ou *OrderUpdate) AddDiscount(f float64) *OrderUpdate {
	ou.mutation.AddDiscount(f)
	return ou
}

// SetDeliveryType sets the "delivery_type" field.
func (ou *OrderUpdate) SetDeliveryType(ot order.DeliveryType) *OrderUpdate {
	ou.mutation.SetDeliveryType(ot)
	return ou
}

// SetNillableDeliveryType sets the "delivery_type" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveryType(ot *order.DeliveryType) *OrderUpdate {
	if ot != nil {
		ou.SetDeliveryType(*ot)
	}
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(o order.Status) *OrderUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(o *order.Status) *OrderUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// SetAddressID sets the "address_id" field.
func (ou *OrderUpdate) SetAddressID(s string) *OrderUpdate {
	ou.mutation.SetAddressID(s)
	return ou
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableAddressID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetAddressID(*s)
	}
	return ou
}

// ClearAddressID clears the value of the "address_id" field.
func (ou *OrderUpdate) ClearAddressID() *OrderUpdate {
	ou.mutation.ClearAddressID()
	return ou
}

// SetPaymentMethod sets the "payment_method" field.
func (ou *OrderUpdate) SetPaymentMethod(s string) *OrderUpdate {
	ou.mutation.SetPaymentMethod(s)
	return ou
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentMethod(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPaymentMethod(*s)
	}
	return ou
}

// SetPaymentStatus sets the "payment_status" field.
func (ou *OrderUpdate) SetPaymentStatus(s string) *OrderUpdate {
	ou.mutation.SetPaymentStatus(s)
	return ou
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentStatus(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPaymentStatus(*s)
	}
	return ou
}

// SetCouponCode sets the "coupon_code" field.
func (ou *OrderUpdate) SetCouponCode(s string) *OrderUpdate {
	ou.mutation.SetCouponCode(s)
	return ou
}

// SetNillableCouponCode sets the "coupon_code" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCouponCode(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCouponCode(*s)
	}
	return ou
}

// ClearCouponCode clears the value of the "coupon_code" field.
func (ou *OrderUpdate) ClearCouponCode() *OrderUpdate {
	ou.mutation.ClearCouponCode()
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrderUpdate) SetCreatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetUser sets the "user" edge to the User entity.
func (ou *OrderUpdate) SetUser(u *User) *OrderUpdate {
	return ou.SetUserID(u.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (ou *OrderUpdate) SetAddress(a *Address) *OrderUpdate {
	return ou.SetAddressID(a.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ou *OrderUpdate) AddOrderItemIDs(ids ...string) *OrderUpdate {
	ou.mutation.AddOrderItemIDs(ids...)
	return ou
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ou *OrderUpdate) AddOrderItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderItemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ou *OrderUpdate) ClearUser() *OrderUpdate {
	ou.mutation.ClearUser()
	return ou
}

// ClearAddress clears the "address" edge to the Address entity.
func (ou *OrderUpdate) ClearAddress() *OrderUpdate {
	ou.mutation.ClearAddress()
	return ou
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (ou *OrderUpdate) ClearOrderItems() *OrderUpdate {
	ou.mutation.ClearOrderItems()
	return ou
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (ou *OrderUpdate) RemoveOrderItemIDs(ids ...string) *OrderUpdate {
	ou.mutation.RemoveOrderItemIDs(ids...)
	return ou
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (ou *OrderUpdate) RemoveOrderItems(o ...*OrderItem) *OrderUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Total(); ok {
		if err := order.TotalValidator(v); err != nil {
			return &ValidationError{Name: "total", err: fmt.Errorf(`ent: validator failed for field "Order.total": %w`, err)}
		}
	}
	if v, ok := ou.mutation.DeliveryType(); ok {
		if err := order.DeliveryTypeValidator(v); err != nil {
			return &ValidationError{Name: "delivery_type", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_type": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ou.mutation.PaymentMethod(); ok {
		if err := order.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`ent: validator failed for field "Order.payment_method": %w`, err)}
		}
	}
	if v, ok := ou.mutation.PaymentStatus(); ok {
		if err := order.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Order.payment_status": %w`, err)}
		}
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Date(); ok {
		_spec.SetField(order.FieldDate, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Total(); ok {
		_spec.SetField(order.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTotal(); ok {
		_spec.AddField(order.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.Shipping(); ok {
		_spec.SetField(order.FieldShipping, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedShipping(); ok {
		_spec.AddField(order.FieldShipping, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.Discount(); ok {
		_spec.SetField(order.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedDiscount(); ok {
		_spec.AddField(order.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.DeliveryType(); ok {
		_spec.SetField(order.FieldDeliveryType, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.PaymentMethod(); ok {
		_spec.SetField(order.FieldPaymentMethod, field.TypeString, value)
	}
	if value, ok := ou.mutation.PaymentStatus(); ok {
		_spec.SetField(order.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := ou.mutation.CouponCode(); ok {
		_spec.SetField(order.FieldCouponCode, field.TypeString, value)
	}
	if ou.mutation.CouponCodeCleared() {
		_spec.ClearField(order.FieldCouponCode, field.TypeString)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserTable,
			Columns: []string{order.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserTable,
			Columns: []string{order.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !ou.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUserID sets the "user_id" field.
func (ouo *OrderUpdateOne) SetUserID(s string) *OrderUpdateOne {
	ouo.mutation.SetUserID(s)
	return ouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUserID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetUserID(*s)
	}
	return ouo
}

// ClearUserID clears the value of the "user_id" field.
func (ouo *OrderUpdateOne) ClearUserID() *OrderUpdateOne {
	ouo.mutation.ClearUserID()
	return ouo
}

// SetDate sets the "date" field.
func (ouo *OrderUpdateOne) SetDate(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDate(t)
	return ouo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDate(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDate(*t)
	}
	return ouo
}

// SetTotal sets the "total" field.
func (ouo *OrderUpdateOne) SetTotal(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTotal()
	ouo.mutation.SetTotal(f)
	return ouo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTotal(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetTotal(*f)
	}
	return ouo
}

// AddTotal adds f to the "total" field.
func (ouo *OrderUpdateOne) AddTotal(f float64) *OrderUpdateOne {
	ouo.mutation.AddTotal(f)
	return ouo
}

// SetShipping sets the "shipping" field.
func (ouo *OrderUpdateOne) SetShipping(f float64) *OrderUpdateOne {
	ouo.mutation.ResetShipping()
	ouo.mutation.SetShipping(f)
	return ouo
}

// SetNillableShipping sets the "shipping" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShipping(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetShipping(*f)
	}
	return ouo
}

// AddShipping adds f to the "shipping" field.
func (ouo *OrderUpdateOne) AddShipping(f float64) *OrderUpdateOne {
	ouo.mutation.AddShipping(f)
	return ouo
}

// SetDiscount sets the "discount" field.
func (ouo *OrderUpdateOne) SetDiscount(f float64) *OrderUpdateOne {
	ouo.mutation.ResetDiscount()
	ouo.mutation.SetDiscount(f)
	return ouo
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDiscount(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetDiscount(*f)
	}
	return ouo
}

// AddDiscount adds f to the "discount" field.
func (ouo *OrderUpdateOne) AddDiscount(f float64) *OrderUpdateOne {
	ouo.mutation.AddDiscount(f)
	return ouo
}

// SetDeliveryType sets the "delivery_type" field.
func (ouo *OrderUpdateOne) SetDeliveryType(ot order.DeliveryType) *OrderUpdateOne {
	ouo.mutation.SetDeliveryType(ot)
	return ouo
}

// SetNillableDeliveryType sets the "delivery_type" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveryType(ot *order.DeliveryType) *OrderUpdateOne {
	if ot != nil {
		ouo.SetDeliveryType(*ot)
	}
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(o order.Status) *OrderUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(o *order.Status) *OrderUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// SetAddressID sets the "address_id" field.
func (ouo *OrderUpdateOne) SetAddressID(s string) *OrderUpdateOne {
	ouo.mutation.SetAddressID(s)
	return ouo
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAddressID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetAddressID(*s)
	}
	return ouo
}

// ClearAddressID clears the value of the "address_id" field.
func (ouo *OrderUpdateOne) ClearAddressID() *OrderUpdateOne {
	ouo.mutation.ClearAddressID()
	return ouo
}

// SetPaymentMethod sets the "payment_method" field.
func (ouo *OrderUpdateOne) SetPaymentMethod(s string) *OrderUpdateOne {
	ouo.mutation.SetPaymentMethod(s)
	return ouo
}

// SetNillablePaymentMethod sets the "payment_method" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentMethod(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPaymentMethod(*s)
	}
	return ouo
}

// SetPaymentStatus sets the "payment_status" field.
func (ouo *OrderUpdateOne) SetPaymentStatus(s string) *OrderUpdateOne {
	ouo.mutation.SetPaymentStatus(s)
	return ouo
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentStatus(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPaymentStatus(*s)
	}
	return ouo
}

// SetCouponCode sets the "coupon_code" field.
func (ouo *OrderUpdateOne) SetCouponCode(s string) *OrderUpdateOne {
	ouo.mutation.SetCouponCode(s)
	return ouo
}

// SetNillableCouponCode sets the "coupon_code" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCouponCode(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCouponCode(*s)
	}
	return ouo
}

// ClearCouponCode clears the value of the "coupon_code" field.
func (ouo *OrderUpdateOne) ClearCouponCode() *OrderUpdateOne {
	ouo.mutation.ClearCouponCode()
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrderUpdateOne) SetCreatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetUser sets the "user" edge to the User entity.
func (ouo *OrderUpdateOne) SetUser(u *User) *OrderUpdateOne {
	return ouo.SetUserID(u.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (ouo *OrderUpdateOne) SetAddress(a *Address) *OrderUpdateOne {
	return ouo.SetAddressID(a.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (ouo *OrderUpdateOne) AddOrderItemIDs(ids ...string) *OrderUpdateOne {
	ouo.mutation.AddOrderItemIDs(ids...)
	return ouo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) AddOrderItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderItemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ouo *OrderUpdateOne) ClearUser() *OrderUpdateOne {
	ouo.mutation.ClearUser()
	return ouo
}

// ClearAddress clears the "address" edge to the Address entity.
func (ouo *OrderUpdateOne) ClearAddress() *OrderUpdateOne {
	ouo.mutation.ClearAddress()
	return ouo
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (ouo *OrderUpdateOne) ClearOrderItems() *OrderUpdateOne {
	ouo.mutation.ClearOrderItems()
	return ouo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderItemIDs(ids ...string) *OrderUpdateOne {
	ouo.mutation.RemoveOrderItemIDs(ids...)
	return ouo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (ouo *OrderUpdateOne) RemoveOrderItems(o ...*OrderItem) *OrderUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderItemIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Total(); ok {
		if err := order.TotalValidator(v); err != nil {
			return &ValidationError{Name: "total", err: fmt.Errorf(`ent: validator failed for field "Order.total": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.DeliveryType(); ok {
		if err := order.DeliveryTypeValidator(v); err != nil {
			return &ValidationError{Name: "delivery_type", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_type": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.PaymentMethod(); ok {
		if err := order.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`ent: validator failed for field "Order.payment_method": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.PaymentStatus(); ok {
		if err := order.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Order.payment_status": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Date(); ok {
		_spec.SetField(order.FieldDate, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Total(); ok {
		_spec.SetField(order.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTotal(); ok {
		_spec.AddField(order.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.Shipping(); ok {
		_spec.SetField(order.FieldShipping, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedShipping(); ok {
		_spec.AddField(order.FieldShipping, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.Discount(); ok {
		_spec.SetField(order.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedDiscount(); ok {
		_spec.AddField(order.FieldDiscount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.DeliveryType(); ok {
		_spec.SetField(order.FieldDeliveryType, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.PaymentMethod(); ok {
		_spec.SetField(order.FieldPaymentMethod, field.TypeString, value)
	}
	if value, ok := ouo.mutation.PaymentStatus(); ok {
		_spec.SetField(order.FieldPaymentStatus, field.TypeString, value)
	}
	if value, ok := ouo.mutation.CouponCode(); ok {
		_spec.SetField(order.FieldCouponCode, field.TypeString, value)
	}
	if ouo.mutation.CouponCodeCleared() {
		_spec.ClearField(order.FieldCouponCode, field.TypeString)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserTable,
			Columns: []string{order.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserTable,
			Columns: []string{order.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !ouo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
