// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/vtrod/veecomm-api/ent/avaliation"
	"github.com/vtrod/veecomm-api/ent/cartitem"
	"github.com/vtrod/veecomm-api/ent/category"
	"github.com/vtrod/veecomm-api/ent/orderitem"
	"github.com/vtrod/veecomm-api/ent/predicate"
	"github.com/vtrod/veecomm-api/ent/product"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetSlug sets the "slug" field.
func (pu *ProductUpdate) SetSlug(s string) *ProductUpdate {
	pu.mutation.SetSlug(s)
	return pu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSlug(s *string) *ProductUpdate {
	if s != nil {
		pu.SetSlug(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProductUpdate) SetDescription(s string) *ProductUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDescription(s *string) *ProductUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductUpdate) SetPrice(f float64) *ProductUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePrice(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetPrice(*f)
	}
	return pu
}

// AddPrice adds f to the "price" field.
func (pu *ProductUpdate) AddPrice(f float64) *ProductUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// SetSalePrice sets the "sale_price" field.
func (pu *ProductUpdate) SetSalePrice(f float64) *ProductUpdate {
	pu.mutation.ResetSalePrice()
	pu.mutation.SetSalePrice(f)
	return pu
}

// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSalePrice(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetSalePrice(*f)
	}
	return pu
}

// AddSalePrice adds f to the "sale_price" field.
func (pu *ProductUpdate) AddSalePrice(f float64) *ProductUpdate {
	pu.mutation.AddSalePrice(f)
	return pu
}

// ClearSalePrice clears the value of the "sale_price" field.
func (pu *ProductUpdate) ClearSalePrice() *ProductUpdate {
	pu.mutation.ClearSalePrice()
	return pu
}

// SetOnSale sets the "on_sale" field.
func (pu *ProductUpdate) SetOnSale(b bool) *ProductUpdate {
	pu.mutation.SetOnSale(b)
	return pu
}

// SetNillableOnSale sets the "on_sale" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableOnSale(b *bool) *ProductUpdate {
	if b != nil {
		pu.SetOnSale(*b)
	}
	return pu
}

// SetStock sets the "stock" field.
func (pu *ProductUpdate) SetStock(i int) *ProductUpdate {
	pu.mutation.ResetStock()
	pu.mutation.SetStock(i)
	return pu
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStock(i *int) *ProductUpdate {
	if i != nil {
		pu.SetStock(*i)
	}
	return pu
}

// AddStock adds i to the "stock" field.
func (pu *ProductUpdate) AddStock(i int) *ProductUpdate {
	pu.mutation.AddStock(i)
	return pu
}

// SetSku sets the "sku" field.
func (pu *ProductUpdate) SetSku(s string) *ProductUpdate {
	pu.mutation.SetSku(s)
	return pu
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSku(s *string) *ProductUpdate {
	if s != nil {
		pu.SetSku(*s)
	}
	return pu
}

// SetCategoryID sets the "category_id" field.
func (pu *ProductUpdate) SetCategoryID(s string) *ProductUpdate {
	pu.mutation.SetCategoryID(s)
	return pu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCategoryID(s *string) *ProductUpdate {
	if s != nil {
		pu.SetCategoryID(*s)
	}
	return pu
}

// ClearCategoryID clears the value of the "category_id" field.
func (pu *ProductUpdate) ClearCategoryID() *ProductUpdate {
	pu.mutation.ClearCategoryID()
	return pu
}

// SetImages sets the "images" field.
func (pu *ProductUpdate) SetImages(s []string) *ProductUpdate {
	pu.mutation.SetImages(s)
	return pu
}

// AppendImages appends s to the "images" field.
func (pu *ProductUpdate) AppendImages(s []string) *ProductUpdate {
	pu.mutation.AppendImages(s)
	return pu
}

// SetRating sets the "rating" field.
func (pu *ProductUpdate) SetRating(f float64) *ProductUpdate {
	pu.mutation.ResetRating()
	pu.mutation.SetRating(f)
	return pu
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableRating(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetRating(*f)
	}
	return pu
}

// AddRating adds f to the "rating" field.
func (pu *ProductUpdate) AddRating(f float64) *ProductUpdate {
	pu.mutation.AddRating(f)
	return pu
}

// SetReviewCount sets the "review_count" field.
func (pu *ProductUpdate) SetReviewCount(i int) *ProductUpdate {
	pu.mutation.ResetReviewCount()
	pu.mutation.SetReviewCount(i)
	return pu
}

// SetNillableReviewCount sets the "review_count" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableReviewCount(i *int) *ProductUpdate {
	if i != nil {
		pu.SetReviewCount(*i)
	}
	return pu
}

// AddReviewCount adds i to the "review_count" field.
func (pu *ProductUpdate) AddReviewCount(i int) *ProductUpdate {
	pu.mutation.AddReviewCount(i)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProductUpdate) SetCreatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// AddAvaliationIDs adds the "avaliations" edge to the Avaliation entity by IDs.
func (pu *ProductUpdate) AddAvaliationIDs(ids ...string) *ProductUpdate {
	pu.mutation.AddAvaliationIDs(ids...)
	return pu
}

// AddAvaliations adds the "avaliations" edges to the Avaliation entity.
func (pu *ProductUpdate) AddAvaliations(a ...*Avaliation) *ProductUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAvaliationIDs(ids...)
}

// SetCategory sets the "category" edge to the Category entity.
func (pu *ProductUpdate) SetCategory(c *Category) *ProductUpdate {
	return pu.SetCategoryID(c.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (pu *ProductUpdate) AddOrderItemIDs(ids ...string) *ProductUpdate {
	pu.mutation.AddOrderItemIDs(ids...)
	return pu
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (pu *ProductUpdate) AddOrderItems(o ...*OrderItem) *ProductUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderItemIDs(ids...)
}

// AddCartItemIDs adds the "cart_items" edge to the CartItem entity by IDs.
func (pu *ProductUpdate) AddCartItemIDs(ids ...string) *ProductUpdate {
	pu.mutation.AddCartItemIDs(ids...)
	return pu
}

// AddCartItems adds the "cart_items" edges to the CartItem entity.
func (pu *ProductUpdate) AddCartItems(c ...*CartItem) *ProductUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCartItemIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearAvaliations clears all "avaliations" edges to the Avaliation entity.
func (pu *ProductUpdate) ClearAvaliations() *ProductUpdate {
	pu.mutation.ClearAvaliations()
	return pu
}

// RemoveAvaliationIDs removes the "avaliations" edge to Avaliation entities by IDs.
func (pu *ProductUpdate) RemoveAvaliationIDs(ids ...string) *ProductUpdate {
	pu.mutation.RemoveAvaliationIDs(ids...)
	return pu
}

// RemoveAvaliations removes "avaliations" edges to Avaliation entities.
func (pu *ProductUpdate) RemoveAvaliations(a ...*Avaliation) *ProductUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAvaliationIDs(ids...)
}

// ClearCategory clears the "category" edge to the Category entity.
func (pu *ProductUpdate) ClearCategory() *ProductUpdate {
	pu.mutation.ClearCategory()
	return pu
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (pu *ProductUpdate) ClearOrderItems() *ProductUpdate {
	pu.mutation.ClearOrderItems()
	return pu
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (pu *ProductUpdate) RemoveOrderItemIDs(ids ...string) *ProductUpdate {
	pu.mutation.RemoveOrderItemIDs(ids...)
	return pu
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (pu *ProductUpdate) RemoveOrderItems(o ...*OrderItem) *ProductUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderItemIDs(ids...)
}

// ClearCartItems clears all "cart_items" edges to the CartItem entity.
func (pu *ProductUpdate) ClearCartItems() *ProductUpdate {
	pu.mutation.ClearCartItems()
	return pu
}

// RemoveCartItemIDs removes the "cart_items" edge to CartItem entities by IDs.
func (pu *ProductUpdate) RemoveCartItemIDs(ids ...string) *ProductUpdate {
	pu.mutation.RemoveCartItemIDs(ids...)
	return pu
}

// RemoveCartItems removes "cart_items" edges to CartItem entities.
func (pu *ProductUpdate) RemoveCartItems(c ...*CartItem) *ProductUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCartItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Slug(); ok {
		if err := product.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Product.slug": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Price(); ok {
		if err := product.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Product.price": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Sku(); ok {
		if err := product.SkuValidator(v); err != nil {
			return &ValidationError{Name: "sku", err: fmt.Errorf(`ent: validator failed for field "Product.sku": %w`, err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Slug(); ok {
		_spec.SetField(product.FieldSlug, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.SalePrice(); ok {
		_spec.SetField(product.FieldSalePrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedSalePrice(); ok {
		_spec.AddField(product.FieldSalePrice, field.TypeFloat64, value)
	}
	if pu.mutation.SalePriceCleared() {
		_spec.ClearField(product.FieldSalePrice, field.TypeFloat64)
	}
	if value, ok := pu.mutation.OnSale(); ok {
		_spec.SetField(product.FieldOnSale, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Stock(); ok {
		_spec.SetField(product.FieldStock, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedStock(); ok {
		_spec.AddField(product.FieldStock, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
	}
	if value, ok := pu.mutation.Images(); ok {
		_spec.SetField(product.FieldImages, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, product.FieldImages, value)
		})
	}
	if value, ok := pu.mutation.Rating(); ok {
		_spec.SetField(product.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedRating(); ok {
		_spec.AddField(product.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.ReviewCount(); ok {
		_spec.SetField(product.FieldReviewCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedReviewCount(); ok {
		_spec.AddField(product.FieldReviewCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.AvaliationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AvaliationsTable,
			Columns: []string{product.AvaliationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avaliation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAvaliationsIDs(); len(nodes) > 0 && !pu.mutation.AvaliationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AvaliationsTable,
			Columns: []string{product.AvaliationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avaliation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AvaliationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AvaliationsTable,
			Columns: []string{product.AvaliationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avaliation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !pu.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCartItemsIDs(); len(nodes) > 0 && !pu.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CartItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetSlug sets the "slug" field.
func (puo *ProductUpdateOne) SetSlug(s string) *ProductUpdateOne {
	puo.mutation.SetSlug(s)
	return puo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSlug(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetSlug(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProductUpdateOne) SetDescription(s string) *ProductUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDescription(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductUpdateOne) SetPrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePrice(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetPrice(*f)
	}
	return puo
}

// AddPrice adds f to the "price" field.
func (puo *ProductUpdateOne) AddPrice(f float64) *ProductUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// SetSalePrice sets the "sale_price" field.
func (puo *ProductUpdateOne) SetSalePrice(f float64) *ProductUpdateOne {
	puo.mutation.ResetSalePrice()
	puo.mutation.SetSalePrice(f)
	return puo
}

// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSalePrice(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetSalePrice(*f)
	}
	return puo
}

// AddSalePrice adds f to the "sale_price" field.
func (puo *ProductUpdateOne) AddSalePrice(f float64) *ProductUpdateOne {
	puo.mutation.AddSalePrice(f)
	return puo
}

// ClearSalePrice clears the value of the "sale_price" field.
func (puo *ProductUpdateOne) ClearSalePrice() *ProductUpdateOne {
	puo.mutation.ClearSalePrice()
	return puo
}

// SetOnSale sets the "on_sale" field.
func (puo *ProductUpdateOne) SetOnSale(b bool) *ProductUpdateOne {
	puo.mutation.SetOnSale(b)
	return puo
}

// SetNillableOnSale sets the "on_sale" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableOnSale(b *bool) *ProductUpdateOne {
	if b != nil {
		puo.SetOnSale(*b)
	}
	return puo
}

// SetStock sets the "stock" field.
func (puo *ProductUpdateOne) SetStock(i int) *ProductUpdateOne {
	puo.mutation.ResetStock()
	puo.mutation.SetStock(i)
	return puo
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStock(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetStock(*i)
	}
	return puo
}

// AddStock adds i to the "stock" field.
func (puo *ProductUpdateOne) AddStock(i int) *ProductUpdateOne {
	puo.mutation.AddStock(i)
	return puo
}

// SetSku sets the "sku" field.
func (puo *ProductUpdateOne) SetSku(s string) *ProductUpdateOne {
	puo.mutation.SetSku(s)
	return puo
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSku(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetSku(*s)
	}
	return puo
}

// SetCategoryID sets the "category_id" field.
func (puo *ProductUpdateOne) SetCategoryID(s string) *ProductUpdateOne {
	puo.mutation.SetCategoryID(s)
	return puo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCategoryID(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetCategoryID(*s)
	}
	return puo
}

// ClearCategoryID clears the value of the "category_id" field.
func (puo *ProductUpdateOne) ClearCategoryID() *ProductUpdateOne {
	puo.mutation.ClearCategoryID()
	return puo
}

// SetImages sets the "images" field.
func (puo *ProductUpdateOne) SetImages(s []string) *ProductUpdateOne {
	puo.mutation.SetImages(s)
	return puo
}

// AppendImages appends s to the "images" field.
func (puo *ProductUpdateOne) AppendImages(s []string) *ProductUpdateOne {
	puo.mutation.AppendImages(s)
	return puo
}

// SetRating sets the "rating" field.
func (puo *ProductUpdateOne) SetRating(f float64) *ProductUpdateOne {
	puo.mutation.ResetRating()
	puo.mutation.SetRating(f)
	return puo
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableRating(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetRating(*f)
	}
	return puo
}

// AddRating adds f to the "rating" field.
func (puo *ProductUpdateOne) AddRating(f float64) *ProductUpdateOne {
	puo.mutation.AddRating(f)
	return puo
}

// SetReviewCount sets the "review_count" field.
func (puo *ProductUpdateOne) SetReviewCount(i int) *ProductUpdateOne {
	puo.mutation.ResetReviewCount()
	puo.mutation.SetReviewCount(i)
	return puo
}

// SetNillableReviewCount sets the "review_count" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableReviewCount(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetReviewCount(*i)
	}
	return puo
}

// AddReviewCount adds i to the "review_count" field.
func (puo *ProductUpdateOne) AddReviewCount(i int) *ProductUpdateOne {
	puo.mutation.AddReviewCount(i)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProductUpdateOne) SetCreatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// AddAvaliationIDs adds the "avaliations" edge to the Avaliation entity by IDs.
func (puo *ProductUpdateOne) AddAvaliationIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.AddAvaliationIDs(ids...)
	return puo
}

// AddAvaliations adds the "avaliations" edges to the Avaliation entity.
func (puo *ProductUpdateOne) AddAvaliations(a ...*Avaliation) *ProductUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAvaliationIDs(ids...)
}

// SetCategory sets the "category" edge to the Category entity.
func (puo *ProductUpdateOne) SetCategory(c *Category) *ProductUpdateOne {
	return puo.SetCategoryID(c.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (puo *ProductUpdateOne) AddOrderItemIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.AddOrderItemIDs(ids...)
	return puo
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (puo *ProductUpdateOne) AddOrderItems(o ...*OrderItem) *ProductUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderItemIDs(ids...)
}

// AddCartItemIDs adds the "cart_items" edge to the CartItem entity by IDs.
func (puo *ProductUpdateOne) AddCartItemIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.AddCartItemIDs(ids...)
	return puo
}

// AddCartItems adds the "cart_items" edges to the CartItem entity.
func (puo *ProductUpdateOne) AddCartItems(c ...*CartItem) *ProductUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCartItemIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearAvaliations clears all "avaliations" edges to the Avaliation entity.
func (puo *ProductUpdateOne) ClearAvaliations() *ProductUpdateOne {
	puo.mutation.ClearAvaliations()
	return puo
}

// RemoveAvaliationIDs removes the "avaliations" edge to Avaliation entities by IDs.
func (puo *ProductUpdateOne) RemoveAvaliationIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.RemoveAvaliationIDs(ids...)
	return puo
}

// RemoveAvaliations removes "avaliations" edges to Avaliation entities.
func (puo *ProductUpdateOne) RemoveAvaliations(a ...*Avaliation) *ProductUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAvaliationIDs(ids...)
}

// ClearCategory clears the "category" edge to the Category entity.
func (puo *ProductUpdateOne) ClearCategory() *ProductUpdateOne {
	puo.mutation.ClearCategory()
	return puo
}

// ClearOrderItems clears all "order_items" edges to the OrderItem entity.
func (puo *ProductUpdateOne) ClearOrderItems() *ProductUpdateOne {
	puo.mutation.ClearOrderItems()
	return puo
}

// RemoveOrderItemIDs removes the "order_items" edge to OrderItem entities by IDs.
func (puo *ProductUpdateOne) RemoveOrderItemIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.RemoveOrderItemIDs(ids...)
	return puo
}

// RemoveOrderItems removes "order_items" edges to OrderItem entities.
func (puo *ProductUpdateOne) RemoveOrderItems(o ...*OrderItem) *ProductUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderItemIDs(ids...)
}

// ClearCartItems clears all "cart_items" edges to the CartItem entity.
func (puo *ProductUpdateOne) ClearCartItems() *ProductUpdateOne {
	puo.mutation.ClearCartItems()
	return puo
}

// RemoveCartItemIDs removes the "cart_items" edge to CartItem entities by IDs.
func (puo *ProductUpdateOne) RemoveCartItemIDs(ids ...string) *ProductUpdateOne {
	puo.mutation.RemoveCartItemIDs(ids...)
	return puo
}

// RemoveCartItems removes "cart_items" edges to CartItem entities.
func (puo *ProductUpdateOne) RemoveCartItems(c ...*CartItem) *ProductUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCartItemIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Slug(); ok {
		if err := product.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Product.slug": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Price(); ok {
		if err := product.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Product.price": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Sku(); ok {
		if err := product.SkuValidator(v); err != nil {
			return &ValidationError{Name: "sku", err: fmt.Errorf(`ent: validator failed for field "Product.sku": %w`, err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Slug(); ok {
		_spec.SetField(product.FieldSlug, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.SalePrice(); ok {
		_spec.SetField(product.FieldSalePrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedSalePrice(); ok {
		_spec.AddField(product.FieldSalePrice, field.TypeFloat64, value)
	}
	if puo.mutation.SalePriceCleared() {
		_spec.ClearField(product.FieldSalePrice, field.TypeFloat64)
	}
	if value, ok := puo.mutation.OnSale(); ok {
		_spec.SetField(product.FieldOnSale, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Stock(); ok {
		_spec.SetField(product.FieldStock, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedStock(); ok {
		_spec.AddField(product.FieldStock, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
	}
	if value, ok := puo.mutation.Images(); ok {
		_spec.SetField(product.FieldImages, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, product.FieldImages, value)
		})
	}
	if value, ok := puo.mutation.Rating(); ok {
		_spec.SetField(product.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedRating(); ok {
		_spec.AddField(product.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.ReviewCount(); ok {
		_spec.SetField(product.FieldReviewCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedReviewCount(); ok {
		_spec.AddField(product.FieldReviewCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.AvaliationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AvaliationsTable,
			Columns: []string{product.AvaliationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avaliation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAvaliationsIDs(); len(nodes) > 0 && !puo.mutation.AvaliationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AvaliationsTable,
			Columns: []string{product.AvaliationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avaliation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AvaliationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AvaliationsTable,
			Columns: []string{product.AvaliationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avaliation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrderItemsIDs(); len(nodes) > 0 && !puo.mutation.OrderItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCartItemsIDs(); len(nodes) > 0 && !puo.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CartItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
