// Code generated by ent, DO NOT EDIT.

package cartitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vtrod/veecomm-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.CartItem {
	return predicate.CartItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.CartItem {
	return predicate.CartItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.CartItem {
	return predicate.CartItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.CartItem {
	return predicate.CartItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.CartItem {
	return predicate.CartItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.CartItem {
	return predicate.CartItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.CartItem {
	return predicate.CartItem(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.CartItem {
	return predicate.CartItem(sql.FieldContainsFold(FieldID, id))
}

// CartID applies equality check predicate on the "cart_id" field. It's identical to CartIDEQ.
func CartID(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldCartID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldProductID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldName, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldPrice, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldImage, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldQuantity, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// CartIDEQ applies the EQ predicate on the "cart_id" field.
func CartIDEQ(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldCartID, v))
}

// CartIDNEQ applies the NEQ predicate on the "cart_id" field.
func CartIDNEQ(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldNEQ(FieldCartID, v))
}

// CartIDIn applies the In predicate on the "cart_id" field.
func CartIDIn(vs ...string) predicate.CartItem {
	return predicate.CartItem(sql.FieldIn(FieldCartID, vs...))
}

// CartIDNotIn applies the NotIn predicate on the "cart_id" field.
func CartIDNotIn(vs ...string) predicate.CartItem {
	return predicate.CartItem(sql.FieldNotIn(FieldCartID, vs...))
}

// CartIDGT applies the GT predicate on the "cart_id" field.
func CartIDGT(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldGT(FieldCartID, v))
}

// CartIDGTE applies the GTE predicate on the "cart_id" field.
func CartIDGTE(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldGTE(FieldCartID, v))
}

// CartIDLT applies the LT predicate on the "cart_id" field.
func CartIDLT(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldLT(FieldCartID, v))
}

// CartIDLTE applies the LTE predicate on the "cart_id" field.
func CartIDLTE(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldLTE(FieldCartID, v))
}

// CartIDContains applies the Contains predicate on the "cart_id" field.
func CartIDContains(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldContains(FieldCartID, v))
}

// CartIDHasPrefix applies the HasPrefix predicate on the "cart_id" field.
func CartIDHasPrefix(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldHasPrefix(FieldCartID, v))
}

// CartIDHasSuffix applies the HasSuffix predicate on the "cart_id" field.
func CartIDHasSuffix(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldHasSuffix(FieldCartID, v))
}

// CartIDIsNil applies the IsNil predicate on the "cart_id" field.
func CartIDIsNil() predicate.CartItem {
	return predicate.CartItem(sql.FieldIsNull(FieldCartID))
}

// CartIDNotNil applies the NotNil predicate on the "cart_id" field.
func CartIDNotNil() predicate.CartItem {
	return predicate.CartItem(sql.FieldNotNull(FieldCartID))
}

// CartIDEqualFold applies the EqualFold predicate on the "cart_id" field.
func CartIDEqualFold(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEqualFold(FieldCartID, v))
}

// CartIDContainsFold applies the ContainsFold predicate on the "cart_id" field.
func CartIDContainsFold(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldContainsFold(FieldCartID, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...string) predicate.CartItem {
	return predicate.CartItem(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...string) predicate.CartItem {
	return predicate.CartItem(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldLTE(FieldProductID, v))
}

// ProductIDContains applies the Contains predicate on the "product_id" field.
func ProductIDContains(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldContains(FieldProductID, v))
}

// ProductIDHasPrefix applies the HasPrefix predicate on the "product_id" field.
func ProductIDHasPrefix(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldHasPrefix(FieldProductID, v))
}

// ProductIDHasSuffix applies the HasSuffix predicate on the "product_id" field.
func ProductIDHasSuffix(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldHasSuffix(FieldProductID, v))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.CartItem {
	return predicate.CartItem(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.CartItem {
	return predicate.CartItem(sql.FieldNotNull(FieldProductID))
}

// ProductIDEqualFold applies the EqualFold predicate on the "product_id" field.
func ProductIDEqualFold(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEqualFold(FieldProductID, v))
}

// ProductIDContainsFold applies the ContainsFold predicate on the "product_id" field.
func ProductIDContainsFold(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldContainsFold(FieldProductID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CartItem {
	return predicate.CartItem(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CartItem {
	return predicate.CartItem(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldContainsFold(FieldName, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.CartItem {
	return predicate.CartItem(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.CartItem {
	return predicate.CartItem(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.CartItem {
	return predicate.CartItem(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.CartItem {
	return predicate.CartItem(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.CartItem {
	return predicate.CartItem(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.CartItem {
	return predicate.CartItem(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.CartItem {
	return predicate.CartItem(sql.FieldLTE(FieldPrice, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.CartItem {
	return predicate.CartItem(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.CartItem {
	return predicate.CartItem(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.CartItem {
	return predicate.CartItem(sql.FieldContainsFold(FieldImage, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.CartItem {
	return predicate.CartItem(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.CartItem {
	return predicate.CartItem(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.CartItem {
	return predicate.CartItem(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.CartItem {
	return predicate.CartItem(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.CartItem {
	return predicate.CartItem(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.CartItem {
	return predicate.CartItem(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.CartItem {
	return predicate.CartItem(sql.FieldLTE(FieldQuantity, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CartItem {
	return predicate.CartItem(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCart applies the HasEdge predicate on the "cart" edge.
func HasCart() predicate.CartItem {
	return predicate.CartItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CartTable, CartColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCartWith applies the HasEdge predicate on the "cart" edge with a given conditions (other predicates).
func HasCartWith(preds ...predicate.Cart) predicate.CartItem {
	return predicate.CartItem(func(s *sql.Selector) {
		step := newCartStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.CartItem {
	return predicate.CartItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.CartItem {
	return predicate.CartItem(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CartItem) predicate.CartItem {
	return predicate.CartItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CartItem) predicate.CartItem {
	return predicate.CartItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CartItem) predicate.CartItem {
	return predicate.CartItem(sql.NotPredicates(p))
}
