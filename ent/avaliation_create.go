// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vtrod/veecomm-api/ent/avaliation"
	"github.com/vtrod/veecomm-api/ent/product"
	"github.com/vtrod/veecomm-api/ent/user"
)

// AvaliationCreate is the builder for creating a Avaliation entity.
type AvaliationCreate struct {
	config
	mutation *AvaliationMutation
	hooks    []Hook
}

// SetProductID sets the "product_id" field.
func (ac *AvaliationCreate) SetProductID(s string) *AvaliationCreate {
	ac.mutation.SetProductID(s)
	return ac
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ac *AvaliationCreate) SetNillableProductID(s *string) *AvaliationCreate {
	if s != nil {
		ac.SetProductID(*s)
	}
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *AvaliationCreate) SetUserID(s string) *AvaliationCreate {
	ac.mutation.SetUserID(s)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *AvaliationCreate) SetNillableUserID(s *string) *AvaliationCreate {
	if s != nil {
		ac.SetUserID(*s)
	}
	return ac
}

// SetUserName sets the "user_name" field.
func (ac *AvaliationCreate) SetUserName(s string) *AvaliationCreate {
	ac.mutation.SetUserName(s)
	return ac
}

// SetRating sets the "rating" field.
func (ac *AvaliationCreate) SetRating(i int) *AvaliationCreate {
	ac.mutation.SetRating(i)
	return ac
}

// SetComment sets the "comment" field.
func (ac *AvaliationCreate) SetComment(s string) *AvaliationCreate {
	ac.mutation.SetComment(s)
	return ac
}

// SetDate sets the "date" field.
func (ac *AvaliationCreate) SetDate(t time.Time) *AvaliationCreate {
	ac.mutation.SetDate(t)
	return ac
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ac *AvaliationCreate) SetNillableDate(t *time.Time) *AvaliationCreate {
	if t != nil {
		ac.SetDate(*t)
	}
	return ac
}

// SetImages sets the "images" field.
func (ac *AvaliationCreate) SetImages(s []string) *AvaliationCreate {
	ac.mutation.SetImages(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AvaliationCreate) SetCreatedAt(t time.Time) *AvaliationCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AvaliationCreate) SetNillableCreatedAt(t *time.Time) *AvaliationCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AvaliationCreate) SetUpdatedAt(t time.Time) *AvaliationCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AvaliationCreate) SetNillableUpdatedAt(t *time.Time) *AvaliationCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AvaliationCreate) SetID(s string) *AvaliationCreate {
	ac.mutation.SetID(s)
	return ac
}

// SetProduct sets the "product" edge to the Product entity.
func (ac *AvaliationCreate) SetProduct(p *Product) *AvaliationCreate {
	return ac.SetProductID(p.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ac *AvaliationCreate) SetUser(u *User) *AvaliationCreate {
	return ac.SetUserID(u.ID)
}

// Mutation returns the AvaliationMutation object of the builder.
func (ac *AvaliationCreate) Mutation() *AvaliationMutation {
	return ac.mutation
}

// Save creates the Avaliation in the database.
func (ac *AvaliationCreate) Save(ctx context.Context) (*Avaliation, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AvaliationCreate) SaveX(ctx context.Context) *Avaliation {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AvaliationCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AvaliationCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AvaliationCreate) defaults() {
	if _, ok := ac.mutation.Date(); !ok {
		v := avaliation.DefaultDate()
		ac.mutation.SetDate(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := avaliation.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := avaliation.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AvaliationCreate) check() error {
	if _, ok := ac.mutation.UserName(); !ok {
		return &ValidationError{Name: "user_name", err: errors.New(`ent: missing required field "Avaliation.user_name"`)}
	}
	if v, ok := ac.mutation.UserName(); ok {
		if err := avaliation.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`ent: validator failed for field "Avaliation.user_name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "Avaliation.rating"`)}
	}
	if v, ok := ac.mutation.Rating(); ok {
		if err := avaliation.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Avaliation.rating": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "Avaliation.comment"`)}
	}
	if v, ok := ac.mutation.Comment(); ok {
		if err := avaliation.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Avaliation.comment": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Avaliation.date"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Avaliation.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Avaliation.updated_at"`)}
	}
	return nil
}

func (ac *AvaliationCreate) sqlSave(ctx context.Context) (*Avaliation, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Avaliation.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AvaliationCreate) createSpec() (*Avaliation, *sqlgraph.CreateSpec) {
	var (
		_node = &Avaliation{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(avaliation.Table, sqlgraph.NewFieldSpec(avaliation.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.UserName(); ok {
		_spec.SetField(avaliation.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := ac.mutation.Rating(); ok {
		_spec.SetField(avaliation.FieldRating, field.TypeInt, value)
		_node.Rating = value
	}
	if value, ok := ac.mutation.Comment(); ok {
		_spec.SetField(avaliation.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := ac.mutation.Date(); ok {
		_spec.SetField(avaliation.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := ac.mutation.Images(); ok {
		_spec.SetField(avaliation.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(avaliation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(avaliation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ac.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   avaliation.ProductTable,
			Columns: []string{avaliation.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   avaliation.UserTable,
			Columns: []string{avaliation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AvaliationCreateBulk is the builder for creating many Avaliation entities in bulk.
type AvaliationCreateBulk struct {
	config
	err      error
	builders []*AvaliationCreate
}

// Save creates the Avaliation entities in the database.
func (acb *AvaliationCreateBulk) Save(ctx context.Context) ([]*Avaliation, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Avaliation, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AvaliationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AvaliationCreateBulk) SaveX(ctx context.Context) []*Avaliation {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AvaliationCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AvaliationCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
