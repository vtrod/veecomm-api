// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vtrod/veecomm-api/ent/coupon"
	"github.com/vtrod/veecomm-api/ent/predicate"
)

// CouponUpdate is the builder for updating Coupon entities.
type CouponUpdate struct {
	config
	hooks    []Hook
	mutation *CouponMutation
}

// Where appends a list predicates to the CouponUpdate builder.
func (cu *CouponUpdate) Where(ps ...predicate.Coupon) *CouponUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCode sets the "code" field.
func (cu *CouponUpdate) SetCode(s string) *CouponUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCode(s *string) *CouponUpdate {
	if s != nil {
		cu.SetCode(*s)
	}
	return cu
}

// SetType sets the "type" field.
func (cu *CouponUpdate) SetType(c coupon.Type) *CouponUpdate {
	cu.mutation.SetType(c)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableType(c *coupon.Type) *CouponUpdate {
	if c != nil {
		cu.SetType(*c)
	}
	return cu
}

// SetValue sets the "value" field.
func (cu *CouponUpdate) SetValue(f float64) *CouponUpdate {
	cu.mutation.ResetValue()
	cu.mutation.SetValue(f)
	return cu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableValue(f *float64) *CouponUpdate {
	if f != nil {
		cu.SetValue(*f)
	}
	return cu
}

// AddValue adds f to the "value" field.
func (cu *CouponUpdate) AddValue(f float64) *CouponUpdate {
	cu.mutation.AddValue(f)
	return cu
}

// SetMinPurchase sets the "min_purchase" field.
func (cu *CouponUpdate) SetMinPurchase(f float64) *CouponUpdate {
	cu.mutation.ResetMinPurchase()
	cu.mutation.SetMinPurchase(f)
	return cu
}

// SetNillableMinPurchase sets the "min_purchase" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableMinPurchase(f *float64) *CouponUpdate {
	if f != nil {
		cu.SetMinPurchase(*f)
	}
	return cu
}

// AddMinPurchase adds f to the "min_purchase" field.
func (cu *CouponUpdate) AddMinPurchase(f float64) *CouponUpdate {
	cu.mutation.AddMinPurchase(f)
	return cu
}

// ClearMinPurchase clears the value of the "min_purchase" field.
func (cu *CouponUpdate) ClearMinPurchase() *CouponUpdate {
	cu.mutation.ClearMinPurchase()
	return cu
}

// SetUsageLimit sets the "usage_limit" field.
func (cu *CouponUpdate) SetUsageLimit(i int) *CouponUpdate {
	cu.mutation.ResetUsageLimit()
	cu.mutation.SetUsageLimit(i)
	return cu
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableUsageLimit(i *int) *CouponUpdate {
	if i != nil {
		cu.SetUsageLimit(*i)
	}
	return cu
}

// AddUsageLimit adds i to the "usage_limit" field.
func (cu *CouponUpdate) AddUsageLimit(i int) *CouponUpdate {
	cu.mutation.AddUsageLimit(i)
	return cu
}

// ClearUsageLimit clears the value of the "usage_limit" field.
func (cu *CouponUpdate) ClearUsageLimit() *CouponUpdate {
	cu.mutation.ClearUsageLimit()
	return cu
}

// SetUsedCount sets the "used_count" field.
func (cu *CouponUpdate) SetUsedCount(i int) *CouponUpdate {
	cu.mutation.ResetUsedCount()
	cu.mutation.SetUsedCount(i)
	return cu
}

// SetNillableUsedCount sets the "used_count" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableUsedCount(i *int) *CouponUpdate {
	if i != nil {
		cu.SetUsedCount(*i)
	}
	return cu
}

// AddUsedCount adds i to the "used_count" field.
func (cu *CouponUpdate) AddUsedCount(i int) *CouponUpdate {
	cu.mutation.AddUsedCount(i)
	return cu
}

// SetExpiresAt sets the "expires_at" field.
func (cu *CouponUpdate) SetExpiresAt(t time.Time) *CouponUpdate {
	cu.mutation.SetExpiresAt(t)
	return cu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableExpiresAt(t *time.Time) *CouponUpdate {
	if t != nil {
		cu.SetExpiresAt(*t)
	}
	return cu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (cu *CouponUpdate) ClearExpiresAt() *CouponUpdate {
	cu.mutation.ClearExpiresAt()
	return cu
}

// SetActive sets the "active" field.
func (cu *CouponUpdate) SetActive(b bool) *CouponUpdate {
	cu.mutation.SetActive(b)
	return cu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableActive(b *bool) *CouponUpdate {
	if b != nil {
		cu.SetActive(*b)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CouponUpdate) SetCreatedAt(t time.Time) *CouponUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCreatedAt(t *time.Time) *CouponUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CouponUpdate) SetUpdatedAt(t time.Time) *CouponUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// Mutation returns the CouponMutation object of the builder.
func (cu *CouponUpdate) Mutation() *CouponMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CouponUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CouponUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CouponUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CouponUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CouponUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := coupon.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CouponUpdate) check() error {
	if v, ok := cu.mutation.Code(); ok {
		if err := coupon.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Coupon.code": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GetType(); ok {
		if err := coupon.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Coupon.type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Value(); ok {
		if err := coupon.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Coupon.value": %w`, err)}
		}
	}
	return nil
}

func (cu *CouponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(coupon.FieldCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(coupon.FieldType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Value(); ok {
		_spec.SetField(coupon.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedValue(); ok {
		_spec.AddField(coupon.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.MinPurchase(); ok {
		_spec.SetField(coupon.FieldMinPurchase, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedMinPurchase(); ok {
		_spec.AddField(coupon.FieldMinPurchase, field.TypeFloat64, value)
	}
	if cu.mutation.MinPurchaseCleared() {
		_spec.ClearField(coupon.FieldMinPurchase, field.TypeFloat64)
	}
	if value, ok := cu.mutation.UsageLimit(); ok {
		_spec.SetField(coupon.FieldUsageLimit, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedUsageLimit(); ok {
		_spec.AddField(coupon.FieldUsageLimit, field.TypeInt, value)
	}
	if cu.mutation.UsageLimitCleared() {
		_spec.ClearField(coupon.FieldUsageLimit, field.TypeInt)
	}
	if value, ok := cu.mutation.UsedCount(); ok {
		_spec.SetField(coupon.FieldUsedCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedUsedCount(); ok {
		_spec.AddField(coupon.FieldUsedCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.ExpiresAt(); ok {
		_spec.SetField(coupon.FieldExpiresAt, field.TypeTime, value)
	}
	if cu.mutation.ExpiresAtCleared() {
		_spec.ClearField(coupon.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Active(); ok {
		_spec.SetField(coupon.FieldActive, field.TypeBool, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(coupon.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CouponUpdateOne is the builder for updating a single Coupon entity.
type CouponUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CouponMutation
}

// SetCode sets the "code" field.
func (cuo *CouponUpdateOne) SetCode(s string) *CouponUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCode(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetCode(*s)
	}
	return cuo
}

// SetType sets the "type" field.
func (cuo *CouponUpdateOne) SetType(c coupon.Type) *CouponUpdateOne {
	cuo.mutation.SetType(c)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableType(c *coupon.Type) *CouponUpdateOne {
	if c != nil {
		cuo.SetType(*c)
	}
	return cuo
}

// SetValue sets the "value" field.
func (cuo *CouponUpdateOne) SetValue(f float64) *CouponUpdateOne {
	cuo.mutation.ResetValue()
	cuo.mutation.SetValue(f)
	return cuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableValue(f *float64) *CouponUpdateOne {
	if f != nil {
		cuo.SetValue(*f)
	}
	return cuo
}

// AddValue adds f to the "value" field.
func (cuo *CouponUpdateOne) AddValue(f float64) *CouponUpdateOne {
	cuo.mutation.AddValue(f)
	return cuo
}

// SetMinPurchase sets the "min_purchase" field.
func (cuo *CouponUpdateOne) SetMinPurchase(f float64) *CouponUpdateOne {
	cuo.mutation.ResetMinPurchase()
	cuo.mutation.SetMinPurchase(f)
	return cuo
}

// SetNillableMinPurchase sets the "min_purchase" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableMinPurchase(f *float64) *CouponUpdateOne {
	if f != nil {
		cuo.SetMinPurchase(*f)
	}
	return cuo
}

// AddMinPurchase adds f to the "min_purchase" field.
func (cuo *CouponUpdateOne) AddMinPurchase(f float64) *CouponUpdateOne {
	cuo.mutation.AddMinPurchase(f)
	return cuo
}

// ClearMinPurchase clears the value of the "min_purchase" field.
func (cuo *CouponUpdateOne) ClearMinPurchase() *CouponUpdateOne {
	cuo.mutation.ClearMinPurchase()
	return cuo
}

// SetUsageLimit sets the "usage_limit" field.
func (cuo *CouponUpdateOne) SetUsageLimit(i int) *CouponUpdateOne {
	cuo.mutation.ResetUsageLimit()
	cuo.mutation.SetUsageLimit(i)
	return cuo
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableUsageLimit(i *int) *CouponUpdateOne {
	if i != nil {
		cuo.SetUsageLimit(*i)
	}
	return cuo
}

// AddUsageLimit adds i to the "usage_limit" field.
func (cuo *CouponUpdateOne) AddUsageLimit(i int) *CouponUpdateOne {
	cuo.mutation.AddUsageLimit(i)
	return cuo
}

// ClearUsageLimit clears the value of the "usage_limit" field.
func (cuo *CouponUpdateOne) ClearUsageLimit() *CouponUpdateOne {
	cuo.mutation.ClearUsageLimit()
	return cuo
}

// SetUsedCount sets the "used_count" field.
func (cuo *CouponUpdateOne) SetUsedCount(i int) *CouponUpdateOne {
	cuo.mutation.ResetUsedCount()
	cuo.mutation.SetUsedCount(i)
	return cuo
}

// SetNillableUsedCount sets the "used_count" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableUsedCount(i *int) *CouponUpdateOne {
	if i != nil {
		cuo.SetUsedCount(*i)
	}
	return cuo
}

// AddUsedCount adds i to the "used_count" field.
func (cuo *CouponUpdateOne) AddUsedCount(i int) *CouponUpdateOne {
	cuo.mutation.AddUsedCount(i)
	return cuo
}

// SetExpiresAt sets the "expires_at" field.
func (cuo *CouponUpdateOne) SetExpiresAt(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetExpiresAt(t)
	return cuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableExpiresAt(t *time.Time) *CouponUpdateOne {
	if t != nil {
		cuo.SetExpiresAt(*t)
	}
	return cuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (cuo *CouponUpdateOne) ClearExpiresAt() *CouponUpdateOne {
	cuo.mutation.ClearExpiresAt()
	return cuo
}

// SetActive sets the "active" field.
func (cuo *CouponUpdateOne) SetActive(b bool) *CouponUpdateOne {
	cuo.mutation.SetActive(b)
	return cuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableActive(b *bool) *CouponUpdateOne {
	if b != nil {
		cuo.SetActive(*b)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CouponUpdateOne) SetCreatedAt(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCreatedAt(t *time.Time) *CouponUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CouponUpdateOne) SetUpdatedAt(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// Mutation returns the CouponMutation object of the builder.
func (cuo *CouponUpdateOne) Mutation() *CouponMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CouponUpdate builder.
func (cuo *CouponUpdateOne) Where(ps ...predicate.Coupon) *CouponUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CouponUpdateOne) Select(field string, fields ...string) *CouponUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Coupon entity.
func (cuo *CouponUpdateOne) Save(ctx context.Context) (*Coupon, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CouponUpdateOne) SaveX(ctx context.Context) *Coupon {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CouponUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CouponUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CouponUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := coupon.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CouponUpdateOne) check() error {
	if v, ok := cuo.mutation.Code(); ok {
		if err := coupon.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Coupon.code": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GetType(); ok {
		if err := coupon.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Coupon.type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Value(); ok {
		if err := coupon.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Coupon.value": %w`, err)}
		}
	}
	return nil
}

func (cuo *CouponUpdateOne) sqlSave(ctx context.Context) (_node *Coupon, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Coupon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coupon.FieldID)
		for _, f := range fields {
			if !coupon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coupon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(coupon.FieldCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(coupon.FieldType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Value(); ok {
		_spec.SetField(coupon.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedValue(); ok {
		_spec.AddField(coupon.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.MinPurchase(); ok {
		_spec.SetField(coupon.FieldMinPurchase, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedMinPurchase(); ok {
		_spec.AddField(coupon.FieldMinPurchase, field.TypeFloat64, value)
	}
	if cuo.mutation.MinPurchaseCleared() {
		_spec.ClearField(coupon.FieldMinPurchase, field.TypeFloat64)
	}
	if value, ok := cuo.mutation.UsageLimit(); ok {
		_spec.SetField(coupon.FieldUsageLimit, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedUsageLimit(); ok {
		_spec.AddField(coupon.FieldUsageLimit, field.TypeInt, value)
	}
	if cuo.mutation.UsageLimitCleared() {
		_spec.ClearField(coupon.FieldUsageLimit, field.TypeInt)
	}
	if value, ok := cuo.mutation.UsedCount(); ok {
		_spec.SetField(coupon.FieldUsedCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedUsedCount(); ok {
		_spec.AddField(coupon.FieldUsedCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.ExpiresAt(); ok {
		_spec.SetField(coupon.FieldExpiresAt, field.TypeTime, value)
	}
	if cuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(coupon.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Active(); ok {
		_spec.SetField(coupon.FieldActive, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(coupon.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Coupon{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
