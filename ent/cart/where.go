// Code generated by ent, DO NOT EDIT.

package cart

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vtrod/veecomm-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Cart {
	return predicate.Cart(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Cart {
	return predicate.Cart(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldUserID, v))
}

// Subtotal applies equality check predicate on the "subtotal" field. It's identical to SubtotalEQ.
func Subtotal(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldSubtotal, v))
}

// Shipping applies equality check predicate on the "shipping" field. It's identical to ShippingEQ.
func Shipping(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldShipping, v))
}

// Discount applies equality check predicate on the "discount" field. It's identical to DiscountEQ.
func Discount(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldDiscount, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldTotal, v))
}

// AppliedCoupon applies equality check predicate on the "applied_coupon" field. It's identical to AppliedCouponEQ.
func AppliedCoupon(v bool) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldAppliedCoupon, v))
}

// CouponCode applies equality check predicate on the "coupon_code" field. It's identical to CouponCodeEQ.
func CouponCode(v string) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldCouponCode, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Cart {
	return predicate.Cart(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Cart {
	return predicate.Cart(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Cart {
	return predicate.Cart(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Cart {
	return predicate.Cart(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Cart {
	return predicate.Cart(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Cart {
	return predicate.Cart(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Cart {
	return predicate.Cart(sql.FieldContainsFold(FieldUserID, v))
}

// SubtotalEQ applies the EQ predicate on the "subtotal" field.
func SubtotalEQ(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldSubtotal, v))
}

// SubtotalNEQ applies the NEQ predicate on the "subtotal" field.
func SubtotalNEQ(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldSubtotal, v))
}

// SubtotalIn applies the In predicate on the "subtotal" field.
func SubtotalIn(vs ...float64) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldSubtotal, vs...))
}

// SubtotalNotIn applies the NotIn predicate on the "subtotal" field.
func SubtotalNotIn(vs ...float64) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldSubtotal, vs...))
}

// SubtotalGT applies the GT predicate on the "subtotal" field.
func SubtotalGT(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldSubtotal, v))
}

// SubtotalGTE applies the GTE predicate on the "subtotal" field.
func SubtotalGTE(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldSubtotal, v))
}

// SubtotalLT applies the LT predicate on the "subtotal" field.
func SubtotalLT(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldSubtotal, v))
}

// SubtotalLTE applies the LTE predicate on the "subtotal" field.
func SubtotalLTE(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldSubtotal, v))
}

// ShippingEQ applies the EQ predicate on the "shipping" field.
func ShippingEQ(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldShipping, v))
}

// ShippingNEQ applies the NEQ predicate on the "shipping" field.
func ShippingNEQ(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldShipping, v))
}

// ShippingIn applies the In predicate on the "shipping" field.
func ShippingIn(vs ...float64) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldShipping, vs...))
}

// ShippingNotIn applies the NotIn predicate on the "shipping" field.
func ShippingNotIn(vs ...float64) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldShipping, vs...))
}

// ShippingGT applies the GT predicate on the "shipping" field.
func ShippingGT(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldShipping, v))
}

// ShippingGTE applies the GTE predicate on the "shipping" field.
func ShippingGTE(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldShipping, v))
}

// ShippingLT applies the LT predicate on the "shipping" field.
func ShippingLT(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldShipping, v))
}

// ShippingLTE applies the LTE predicate on the "shipping" field.
func ShippingLTE(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldShipping, v))
}

// ShippingIsNil applies the IsNil predicate on the "shipping" field.
func ShippingIsNil() predicate.Cart {
	return predicate.Cart(sql.FieldIsNull(FieldShipping))
}

// ShippingNotNil applies the NotNil predicate on the "shipping" field.
func ShippingNotNil() predicate.Cart {
	return predicate.Cart(sql.FieldNotNull(FieldShipping))
}

// DiscountEQ applies the EQ predicate on the "discount" field.
func DiscountEQ(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldDiscount, v))
}

// DiscountNEQ applies the NEQ predicate on the "discount" field.
func DiscountNEQ(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldDiscount, v))
}

// DiscountIn applies the In predicate on the "discount" field.
func DiscountIn(vs ...float64) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldDiscount, vs...))
}

// DiscountNotIn applies the NotIn predicate on the "discount" field.
func DiscountNotIn(vs ...float64) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldDiscount, vs...))
}

// DiscountGT applies the GT predicate on the "discount" field.
func DiscountGT(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldDiscount, v))
}

// DiscountGTE applies the GTE predicate on the "discount" field.
func DiscountGTE(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldDiscount, v))
}

// DiscountLT applies the LT predicate on the "discount" field.
func DiscountLT(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldDiscount, v))
}

// DiscountLTE applies the LTE predicate on the "discount" field.
func DiscountLTE(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldDiscount, v))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...float64) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...float64) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v float64) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldTotal, v))
}

// AppliedCouponEQ applies the EQ predicate on the "applied_coupon" field.
func AppliedCouponEQ(v bool) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldAppliedCoupon, v))
}

// AppliedCouponNEQ applies the NEQ predicate on the "applied_coupon" field.
func AppliedCouponNEQ(v bool) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldAppliedCoupon, v))
}

// CouponCodeEQ applies the EQ predicate on the "coupon_code" field.
func CouponCodeEQ(v string) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldCouponCode, v))
}

// CouponCodeNEQ applies the NEQ predicate on the "coupon_code" field.
func CouponCodeNEQ(v string) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldCouponCode, v))
}

// CouponCodeIn applies the In predicate on the "coupon_code" field.
func CouponCodeIn(vs ...string) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldCouponCode, vs...))
}

// CouponCodeNotIn applies the NotIn predicate on the "coupon_code" field.
func CouponCodeNotIn(vs ...string) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldCouponCode, vs...))
}

// CouponCodeGT applies the GT predicate on the "coupon_code" field.
func CouponCodeGT(v string) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldCouponCode, v))
}

// CouponCodeGTE applies the GTE predicate on the "coupon_code" field.
func CouponCodeGTE(v string) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldCouponCode, v))
}

// CouponCodeLT applies the LT predicate on the "coupon_code" field.
func CouponCodeLT(v string) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldCouponCode, v))
}

// CouponCodeLTE applies the LTE predicate on the "coupon_code" field.
func CouponCodeLTE(v string) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldCouponCode, v))
}

// CouponCodeContains applies the Contains predicate on the "coupon_code" field.
func CouponCodeContains(v string) predicate.Cart {
	return predicate.Cart(sql.FieldContains(FieldCouponCode, v))
}

// CouponCodeHasPrefix applies the HasPrefix predicate on the "coupon_code" field.
func CouponCodeHasPrefix(v string) predicate.Cart {
	return predicate.Cart(sql.FieldHasPrefix(FieldCouponCode, v))
}

// CouponCodeHasSuffix applies the HasSuffix predicate on the "coupon_code" field.
func CouponCodeHasSuffix(v string) predicate.Cart {
	return predicate.Cart(sql.FieldHasSuffix(FieldCouponCode, v))
}

// CouponCodeIsNil applies the IsNil predicate on the "coupon_code" field.
func CouponCodeIsNil() predicate.Cart {
	return predicate.Cart(sql.FieldIsNull(FieldCouponCode))
}

// CouponCodeNotNil applies the NotNil predicate on the "coupon_code" field.
func CouponCodeNotNil() predicate.Cart {
	return predicate.Cart(sql.FieldNotNull(FieldCouponCode))
}

// CouponCodeEqualFold applies the EqualFold predicate on the "coupon_code" field.
func CouponCodeEqualFold(v string) predicate.Cart {
	return predicate.Cart(sql.FieldEqualFold(FieldCouponCode, v))
}

// CouponCodeContainsFold applies the ContainsFold predicate on the "coupon_code" field.
func CouponCodeContainsFold(v string) predicate.Cart {
	return predicate.Cart(sql.FieldContainsFold(FieldCouponCode, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Cart {
	return predicate.Cart(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCartItems applies the HasEdge predicate on the "cart_items" edge.
func HasCartItems() predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CartItemsTable, CartItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCartItemsWith applies the HasEdge predicate on the "cart_items" edge with a given conditions (other predicates).
func HasCartItemsWith(preds ...predicate.CartItem) predicate.Cart {
	return predicate.Cart(func(s *sql.Selector) {
		step := newCartItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cart) predicate.Cart {
	return predicate.Cart(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cart) predicate.Cart {
	return predicate.Cart(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cart) predicate.Cart {
	return predicate.Cart(sql.NotPredicates(p))
}
