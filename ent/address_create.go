// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vtrod/veecomm-api/ent/address"
	"github.com/vtrod/veecomm-api/ent/order"
	"github.com/vtrod/veecomm-api/ent/user"
)

// AddressCreate is the builder for creating a Address entity.
type AddressCreate struct {
	config
	mutation *AddressMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ac *AddressCreate) SetUserID(s string) *AddressCreate {
	ac.mutation.SetUserID(s)
	return ac
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ac *AddressCreate) SetNillableUserID(s *string) *AddressCreate {
	if s != nil {
		ac.SetUserID(*s)
	}
	return ac
}

// SetCep sets the "cep" field.
func (ac *AddressCreate) SetCep(s string) *AddressCreate {
	ac.mutation.SetCep(s)
	return ac
}

// SetLogradouro sets the "logradouro" field.
func (ac *AddressCreate) SetLogradouro(s string) *AddressCreate {
	ac.mutation.SetLogradouro(s)
	return ac
}

// SetNumero sets the "numero" field.
func (ac *AddressCreate) SetNumero(s string) *AddressCreate {
	ac.mutation.SetNumero(s)
	return ac
}

// SetComplemento sets the "complemento" field.
func (ac *AddressCreate) SetComplemento(s string) *AddressCreate {
	ac.mutation.SetComplemento(s)
	return ac
}

// SetNillableComplemento sets the "complemento" field if the given value is not nil.
func (ac *AddressCreate) SetNillableComplemento(s *string) *AddressCreate {
	if s != nil {
		ac.SetComplemento(*s)
	}
	return ac
}

// SetBairro sets the "bairro" field.
func (ac *AddressCreate) SetBairro(s string) *AddressCreate {
	ac.mutation.SetBairro(s)
	return ac
}

// SetCidade sets the "cidade" field.
func (ac *AddressCreate) SetCidade(s string) *AddressCreate {
	ac.mutation.SetCidade(s)
	return ac
}

// SetEstado sets the "estado" field.
func (ac *AddressCreate) SetEstado(s string) *AddressCreate {
	ac.mutation.SetEstado(s)
	return ac
}

// SetIsDefault sets the "is_default" field.
func (ac *AddressCreate) SetIsDefault(b bool) *AddressCreate {
	ac.mutation.SetIsDefault(b)
	return ac
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ac *AddressCreate) SetNillableIsDefault(b *bool) *AddressCreate {
	if b != nil {
		ac.SetIsDefault(*b)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AddressCreate) SetCreatedAt(t time.Time) *AddressCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AddressCreate) SetNillableCreatedAt(t *time.Time) *AddressCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AddressCreate) SetUpdatedAt(t time.Time) *AddressCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AddressCreate) SetNillableUpdatedAt(t *time.Time) *AddressCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AddressCreate) SetID(s string) *AddressCreate {
	ac.mutation.SetID(s)
	return ac
}

// SetUser sets the "user" edge to the User entity.
func (ac *AddressCreate) SetUser(u *User) *AddressCreate {
	return ac.SetUserID(u.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (ac *AddressCreate) AddOrderIDs(ids ...string) *AddressCreate {
	ac.mutation.AddOrderIDs(ids...)
	return ac
}

// AddOrders adds the "orders" edges to the Order entity.
func (ac *AddressCreate) AddOrders(o ...*Order) *AddressCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddOrderIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (ac *AddressCreate) Mutation() *AddressMutation {
	return ac.mutation
}

// Save creates the Address in the database.
func (ac *AddressCreate) Save(ctx context.Context) (*Address, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AddressCreate) SaveX(ctx context.Context) *Address {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AddressCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AddressCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AddressCreate) defaults() {
	if _, ok := ac.mutation.IsDefault(); !ok {
		v := address.DefaultIsDefault
		ac.mutation.SetIsDefault(v)
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := address.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := address.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AddressCreate) check() error {
	if _, ok := ac.mutation.Cep(); !ok {
		return &ValidationError{Name: "cep", err: errors.New(`ent: missing required field "Address.cep"`)}
	}
	if v, ok := ac.mutation.Cep(); ok {
		if err := address.CepValidator(v); err != nil {
			return &ValidationError{Name: "cep", err: fmt.Errorf(`ent: validator failed for field "Address.cep": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Logradouro(); !ok {
		return &ValidationError{Name: "logradouro", err: errors.New(`ent: missing required field "Address.logradouro"`)}
	}
	if v, ok := ac.mutation.Logradouro(); ok {
		if err := address.LogradouroValidator(v); err != nil {
			return &ValidationError{Name: "logradouro", err: fmt.Errorf(`ent: validator failed for field "Address.logradouro": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Numero(); !ok {
		return &ValidationError{Name: "numero", err: errors.New(`ent: missing required field "Address.numero"`)}
	}
	if v, ok := ac.mutation.Numero(); ok {
		if err := address.NumeroValidator(v); err != nil {
			return &ValidationError{Name: "numero", err: fmt.Errorf(`ent: validator failed for field "Address.numero": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Bairro(); !ok {
		return &ValidationError{Name: "bairro", err: errors.New(`ent: missing required field "Address.bairro"`)}
	}
	if v, ok := ac.mutation.Bairro(); ok {
		if err := address.BairroValidator(v); err != nil {
			return &ValidationError{Name: "bairro", err: fmt.Errorf(`ent: validator failed for field "Address.bairro": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Cidade(); !ok {
		return &ValidationError{Name: "cidade", err: errors.New(`ent: missing required field "Address.cidade"`)}
	}
	if v, ok := ac.mutation.Cidade(); ok {
		if err := address.CidadeValidator(v); err != nil {
			return &ValidationError{Name: "cidade", err: fmt.Errorf(`ent: validator failed for field "Address.cidade": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Estado(); !ok {
		return &ValidationError{Name: "estado", err: errors.New(`ent: missing required field "Address.estado"`)}
	}
	if v, ok := ac.mutation.Estado(); ok {
		if err := address.EstadoValidator(v); err != nil {
			return &ValidationError{Name: "estado", err: fmt.Errorf(`ent: validator failed for field "Address.estado": %w`, err)}
		}
	}
	if _, ok := ac.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "Address.is_default"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Address.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Address.updated_at"`)}
	}
	return nil
}

func (ac *AddressCreate) sqlSave(ctx context.Context) (*Address, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Address.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AddressCreate) createSpec() (*Address, *sqlgraph.CreateSpec) {
	var (
		_node = &Address{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(address.Table, sqlgraph.NewFieldSpec(address.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Cep(); ok {
		_spec.SetField(address.FieldCep, field.TypeString, value)
		_node.Cep = value
	}
	if value, ok := ac.mutation.Logradouro(); ok {
		_spec.SetField(address.FieldLogradouro, field.TypeString, value)
		_node.Logradouro = value
	}
	if value, ok := ac.mutation.Numero(); ok {
		_spec.SetField(address.FieldNumero, field.TypeString, value)
		_node.Numero = value
	}
	if value, ok := ac.mutation.Complemento(); ok {
		_spec.SetField(address.FieldComplemento, field.TypeString, value)
		_node.Complemento = value
	}
	if value, ok := ac.mutation.Bairro(); ok {
		_spec.SetField(address.FieldBairro, field.TypeString, value)
		_node.Bairro = value
	}
	if value, ok := ac.mutation.Cidade(); ok {
		_spec.SetField(address.FieldCidade, field.TypeString, value)
		_node.Cidade = value
	}
	if value, ok := ac.mutation.Estado(); ok {
		_spec.SetField(address.FieldEstado, field.TypeString, value)
		_node.Estado = value
	}
	if value, ok := ac.mutation.IsDefault(); ok {
		_spec.SetField(address.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(address.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(address.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.UserTable,
			Columns: []string{address.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AddressCreateBulk is the builder for creating many Address entities in bulk.
type AddressCreateBulk struct {
	config
	err      error
	builders []*AddressCreate
}

// Save creates the Address entities in the database.
func (acb *AddressCreateBulk) Save(ctx context.Context) ([]*Address, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Address, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AddressCreateBulk) SaveX(ctx context.Context) []*Address {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AddressCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AddressCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
