// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vtrod/veecomm-api/ent/order"
	"github.com/vtrod/veecomm-api/ent/orderitem"
	"github.com/vtrod/veecomm-api/ent/predicate"
	"github.com/vtrod/veecomm-api/ent/product"
)

// OrderItemUpdate is the builder for updating OrderItem entities.
type OrderItemUpdate struct {
	config
	hooks    []Hook
	mutation *OrderItemMutation
}

// Where appends a list predicates to the OrderItemUpdate builder.
func (oiu *OrderItemUpdate) Where(ps ...predicate.OrderItem) *OrderItemUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetOrderID sets the "order_id" field.
func (oiu *OrderItemUpdate) SetOrderID(s string) *OrderItemUpdate {
	oiu.mutation.SetOrderID(s)
	return oiu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableOrderID(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetOrderID(*s)
	}
	return oiu
}

// ClearOrderID clears the value of the "order_id" field.
func (oiu *OrderItemUpdate) ClearOrderID() *OrderItemUpdate {
	oiu.mutation.ClearOrderID()
	return oiu
}

// SetProductID sets the "product_id" field.
func (oiu *OrderItemUpdate) SetProductID(s string) *OrderItemUpdate {
	oiu.mutation.SetProductID(s)
	return oiu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableProductID(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetProductID(*s)
	}
	return oiu
}

// ClearProductID clears the value of the "product_id" field.
func (oiu *OrderItemUpdate) ClearProductID() *OrderItemUpdate {
	oiu.mutation.ClearProductID()
	return oiu
}

// SetName sets the "name" field.
func (oiu *OrderItemUpdate) SetName(s string) *OrderItemUpdate {
	oiu.mutation.SetName(s)
	return oiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableName(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetName(*s)
	}
	return oiu
}

// SetPrice sets the "price" field.
func (oiu *OrderItemUpdate) SetPrice(f float64) *OrderItemUpdate {
	oiu.mutation.ResetPrice()
	oiu.mutation.SetPrice(f)
	return oiu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillablePrice(f *float64) *OrderItemUpdate {
	if f != nil {
		oiu.SetPrice(*f)
	}
	return oiu
}

// AddPrice adds f to the "price" field.
func (oiu *OrderItemUpdate) AddPrice(f float64) *OrderItemUpdate {
	oiu.mutation.AddPrice(f)
	return oiu
}

// SetImage sets the "image" field.
func (oiu *OrderItemUpdate) SetImage(s string) *OrderItemUpdate {
	oiu.mutation.SetImage(s)
	return oiu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableImage(s *string) *OrderItemUpdate {
	if s != nil {
		oiu.SetImage(*s)
	}
	return oiu
}

// SetQuantity sets the "quantity" field.
func (oiu *OrderItemUpdate) SetQuantity(i int) *OrderItemUpdate {
	oiu.mutation.ResetQuantity()
	oiu.mutation.SetQuantity(i)
	return oiu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableQuantity(i *int) *OrderItemUpdate {
	if i != nil {
		oiu.SetQuantity(*i)
	}
	return oiu
}

// AddQuantity adds i to the "quantity" field.
func (oiu *OrderItemUpdate) AddQuantity(i int) *OrderItemUpdate {
	oiu.mutation.AddQuantity(i)
	return oiu
}

// SetCreatedAt sets the "created_at" field.
func (oiu *OrderItemUpdate) SetCreatedAt(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetCreatedAt(t)
	return oiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oiu *OrderItemUpdate) SetNillableCreatedAt(t *time.Time) *OrderItemUpdate {
	if t != nil {
		oiu.SetCreatedAt(*t)
	}
	return oiu
}

// SetUpdatedAt sets the "updated_at" field.
func (oiu *OrderItemUpdate) SetUpdatedAt(t time.Time) *OrderItemUpdate {
	oiu.mutation.SetUpdatedAt(t)
	return oiu
}

// SetOrder sets the "order" edge to the Order entity.
func (oiu *OrderItemUpdate) SetOrder(o *Order) *OrderItemUpdate {
	return oiu.SetOrderID(o.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (oiu *OrderItemUpdate) SetProduct(p *Product) *OrderItemUpdate {
	return oiu.SetProductID(p.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiu *OrderItemUpdate) Mutation() *OrderItemMutation {
	return oiu.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oiu *OrderItemUpdate) ClearOrder() *OrderItemUpdate {
	oiu.mutation.ClearOrder()
	return oiu
}

// ClearProduct clears the "product" edge to the Product entity.
func (oiu *OrderItemUpdate) ClearProduct() *OrderItemUpdate {
	oiu.mutation.ClearProduct()
	return oiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrderItemUpdate) Save(ctx context.Context) (int, error) {
	oiu.defaults()
	return withHooks(ctx, oiu.sqlSave, oiu.mutation, oiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrderItemUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrderItemUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrderItemUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiu *OrderItemUpdate) defaults() {
	if _, ok := oiu.mutation.UpdatedAt(); !ok {
		v := orderitem.UpdateDefaultUpdatedAt()
		oiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiu *OrderItemUpdate) check() error {
	if v, ok := oiu.mutation.Name(); ok {
		if err := orderitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OrderItem.name": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.Price(); ok {
		if err := orderitem.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "OrderItem.price": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.Image(); ok {
		if err := orderitem.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "OrderItem.image": %w`, err)}
		}
	}
	if v, ok := oiu.mutation.Quantity(); ok {
		if err := orderitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "OrderItem.quantity": %w`, err)}
		}
	}
	return nil
}

func (oiu *OrderItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderitem.Table, orderitem.Columns, sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString))
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.Name(); ok {
		_spec.SetField(orderitem.FieldName, field.TypeString, value)
	}
	if value, ok := oiu.mutation.Price(); ok {
		_spec.SetField(orderitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.AddedPrice(); ok {
		_spec.AddField(orderitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := oiu.mutation.Image(); ok {
		_spec.SetField(orderitem.FieldImage, field.TypeString, value)
	}
	if value, ok := oiu.mutation.Quantity(); ok {
		_spec.SetField(orderitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.AddedQuantity(); ok {
		_spec.AddField(orderitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := oiu.mutation.CreatedAt(); ok {
		_spec.SetField(orderitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oiu.mutation.UpdatedAt(); ok {
		_spec.SetField(orderitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if oiu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.ProductTable,
			Columns: []string{orderitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.ProductTable,
			Columns: []string{orderitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oiu.mutation.done = true
	return n, nil
}

// OrderItemUpdateOne is the builder for updating a single OrderItem entity.
type OrderItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderItemMutation
}

// SetOrderID sets the "order_id" field.
func (oiuo *OrderItemUpdateOne) SetOrderID(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetOrderID(s)
	return oiuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableOrderID(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetOrderID(*s)
	}
	return oiuo
}

// ClearOrderID clears the value of the "order_id" field.
func (oiuo *OrderItemUpdateOne) ClearOrderID() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrderID()
	return oiuo
}

// SetProductID sets the "product_id" field.
func (oiuo *OrderItemUpdateOne) SetProductID(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetProductID(s)
	return oiuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableProductID(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetProductID(*s)
	}
	return oiuo
}

// ClearProductID clears the value of the "product_id" field.
func (oiuo *OrderItemUpdateOne) ClearProductID() *OrderItemUpdateOne {
	oiuo.mutation.ClearProductID()
	return oiuo
}

// SetName sets the "name" field.
func (oiuo *OrderItemUpdateOne) SetName(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetName(s)
	return oiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableName(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetName(*s)
	}
	return oiuo
}

// SetPrice sets the "price" field.
func (oiuo *OrderItemUpdateOne) SetPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.ResetPrice()
	oiuo.mutation.SetPrice(f)
	return oiuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillablePrice(f *float64) *OrderItemUpdateOne {
	if f != nil {
		oiuo.SetPrice(*f)
	}
	return oiuo
}

// AddPrice adds f to the "price" field.
func (oiuo *OrderItemUpdateOne) AddPrice(f float64) *OrderItemUpdateOne {
	oiuo.mutation.AddPrice(f)
	return oiuo
}

// SetImage sets the "image" field.
func (oiuo *OrderItemUpdateOne) SetImage(s string) *OrderItemUpdateOne {
	oiuo.mutation.SetImage(s)
	return oiuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableImage(s *string) *OrderItemUpdateOne {
	if s != nil {
		oiuo.SetImage(*s)
	}
	return oiuo
}

// SetQuantity sets the "quantity" field.
func (oiuo *OrderItemUpdateOne) SetQuantity(i int) *OrderItemUpdateOne {
	oiuo.mutation.ResetQuantity()
	oiuo.mutation.SetQuantity(i)
	return oiuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableQuantity(i *int) *OrderItemUpdateOne {
	if i != nil {
		oiuo.SetQuantity(*i)
	}
	return oiuo
}

// AddQuantity adds i to the "quantity" field.
func (oiuo *OrderItemUpdateOne) AddQuantity(i int) *OrderItemUpdateOne {
	oiuo.mutation.AddQuantity(i)
	return oiuo
}

// SetCreatedAt sets the "created_at" field.
func (oiuo *OrderItemUpdateOne) SetCreatedAt(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetCreatedAt(t)
	return oiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oiuo *OrderItemUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderItemUpdateOne {
	if t != nil {
		oiuo.SetCreatedAt(*t)
	}
	return oiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (oiuo *OrderItemUpdateOne) SetUpdatedAt(t time.Time) *OrderItemUpdateOne {
	oiuo.mutation.SetUpdatedAt(t)
	return oiuo
}

// SetOrder sets the "order" edge to the Order entity.
func (oiuo *OrderItemUpdateOne) SetOrder(o *Order) *OrderItemUpdateOne {
	return oiuo.SetOrderID(o.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (oiuo *OrderItemUpdateOne) SetProduct(p *Product) *OrderItemUpdateOne {
	return oiuo.SetProductID(p.ID)
}

// Mutation returns the OrderItemMutation object of the builder.
func (oiuo *OrderItemUpdateOne) Mutation() *OrderItemMutation {
	return oiuo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oiuo *OrderItemUpdateOne) ClearOrder() *OrderItemUpdateOne {
	oiuo.mutation.ClearOrder()
	return oiuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (oiuo *OrderItemUpdateOne) ClearProduct() *OrderItemUpdateOne {
	oiuo.mutation.ClearProduct()
	return oiuo
}

// Where appends a list predicates to the OrderItemUpdate builder.
func (oiuo *OrderItemUpdateOne) Where(ps ...predicate.OrderItem) *OrderItemUpdateOne {
	oiuo.mutation.Where(ps...)
	return oiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrderItemUpdateOne) Select(field string, fields ...string) *OrderItemUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrderItem entity.
func (oiuo *OrderItemUpdateOne) Save(ctx context.Context) (*OrderItem, error) {
	oiuo.defaults()
	return withHooks(ctx, oiuo.sqlSave, oiuo.mutation, oiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) SaveX(ctx context.Context) *OrderItem {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrderItemUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrderItemUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oiuo *OrderItemUpdateOne) defaults() {
	if _, ok := oiuo.mutation.UpdatedAt(); !ok {
		v := orderitem.UpdateDefaultUpdatedAt()
		oiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiuo *OrderItemUpdateOne) check() error {
	if v, ok := oiuo.mutation.Name(); ok {
		if err := orderitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OrderItem.name": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.Price(); ok {
		if err := orderitem.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "OrderItem.price": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.Image(); ok {
		if err := orderitem.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "OrderItem.image": %w`, err)}
		}
	}
	if v, ok := oiuo.mutation.Quantity(); ok {
		if err := orderitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "OrderItem.quantity": %w`, err)}
		}
	}
	return nil
}

func (oiuo *OrderItemUpdateOne) sqlSave(ctx context.Context) (_node *OrderItem, err error) {
	if err := oiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderitem.Table, orderitem.Columns, sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString))
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderitem.FieldID)
		for _, f := range fields {
			if !orderitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.Name(); ok {
		_spec.SetField(orderitem.FieldName, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.Price(); ok {
		_spec.SetField(orderitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.AddedPrice(); ok {
		_spec.AddField(orderitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := oiuo.mutation.Image(); ok {
		_spec.SetField(orderitem.FieldImage, field.TypeString, value)
	}
	if value, ok := oiuo.mutation.Quantity(); ok {
		_spec.SetField(orderitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.AddedQuantity(); ok {
		_spec.AddField(orderitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := oiuo.mutation.CreatedAt(); ok {
		_spec.SetField(orderitem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := oiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if oiuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.OrderTable,
			Columns: []string{orderitem.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.ProductTable,
			Columns: []string{orderitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderitem.ProductTable,
			Columns: []string{orderitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderItem{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oiuo.mutation.done = true
	return _node, nil
}
