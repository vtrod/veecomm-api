// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vtrod/veecomm-api/ent/cart"
	"github.com/vtrod/veecomm-api/ent/user"
)

// Cart is the model entity for the Cart schema.
type Cart struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Subtotal holds the value of the "subtotal" field.
	Subtotal float64 `json:"subtotal,omitempty"`
	// Shipping holds the value of the "shipping" field.
	Shipping float64 `json:"shipping,omitempty"`
	// Discount holds the value of the "discount" field.
	Discount float64 `json:"discount,omitempty"`
	// Total holds the value of the "total" field.
	Total float64 `json:"total,omitempty"`
	// AppliedCoupon holds the value of the "applied_coupon" field.
	AppliedCoupon bool `json:"applied_coupon,omitempty"`
	// CouponCode holds the value of the "coupon_code" field.
	CouponCode string `json:"coupon_code,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CartQuery when eager-loading is set.
	Edges        CartEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CartEdges holds the relations/edges for other nodes in the graph.
type CartEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// CartItems holds the value of the cart_items edge.
	CartItems []*CartItem `json:"cart_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CartItemsOrErr returns the CartItems value or an error if the edge
// was not loaded in eager-loading.
func (e CartEdges) CartItemsOrErr() ([]*CartItem, error) {
	if e.loadedTypes[1] {
		return e.CartItems, nil
	}
	return nil, &NotLoadedError{edge: "cart_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cart) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cart.FieldAppliedCoupon:
			values[i] = new(sql.NullBool)
		case cart.FieldSubtotal, cart.FieldShipping, cart.FieldDiscount, cart.FieldTotal:
			values[i] = new(sql.NullFloat64)
		case cart.FieldID, cart.FieldUserID, cart.FieldCouponCode:
			values[i] = new(sql.NullString)
		case cart.FieldCreatedAt, cart.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cart fields.
func (c *Cart) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cart.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case cart.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = value.String
			}
		case cart.FieldSubtotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field subtotal", values[i])
			} else if value.Valid {
				c.Subtotal = value.Float64
			}
		case cart.FieldShipping:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping", values[i])
			} else if value.Valid {
				c.Shipping = value.Float64
			}
		case cart.FieldDiscount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount", values[i])
			} else if value.Valid {
				c.Discount = value.Float64
			}
		case cart.FieldTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				c.Total = value.Float64
			}
		case cart.FieldAppliedCoupon:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field applied_coupon", values[i])
			} else if value.Valid {
				c.AppliedCoupon = value.Bool
			}
		case cart.FieldCouponCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_code", values[i])
			} else if value.Valid {
				c.CouponCode = value.String
			}
		case cart.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case cart.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cart.
// This includes values selected through modifiers, order, etc.
func (c *Cart) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Cart entity.
func (c *Cart) QueryUser() *UserQuery {
	return NewCartClient(c.config).QueryUser(c)
}

// QueryCartItems queries the "cart_items" edge of the Cart entity.
func (c *Cart) QueryCartItems() *CartItemQuery {
	return NewCartClient(c.config).QueryCartItems(c)
}

// Update returns a builder for updating this Cart.
// Note that you need to call Cart.Unwrap() before calling this method if this Cart
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cart) Update() *CartUpdateOne {
	return NewCartClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cart entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cart) Unwrap() *Cart {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cart is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cart) String() string {
	var builder strings.Builder
	builder.WriteString("Cart(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("user_id=")
	builder.WriteString(c.UserID)
	builder.WriteString(", ")
	builder.WriteString("subtotal=")
	builder.WriteString(fmt.Sprintf("%v", c.Subtotal))
	builder.WriteString(", ")
	builder.WriteString("shipping=")
	builder.WriteString(fmt.Sprintf("%v", c.Shipping))
	builder.WriteString(", ")
	builder.WriteString("discount=")
	builder.WriteString(fmt.Sprintf("%v", c.Discount))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", c.Total))
	builder.WriteString(", ")
	builder.WriteString("applied_coupon=")
	builder.WriteString(fmt.Sprintf("%v", c.AppliedCoupon))
	builder.WriteString(", ")
	builder.WriteString("coupon_code=")
	builder.WriteString(c.CouponCode)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Carts is a parsable slice of Cart.
type Carts []*Cart
