// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vtrod/veecomm-api/ent/address"
	"github.com/vtrod/veecomm-api/ent/order"
	"github.com/vtrod/veecomm-api/ent/orderitem"
	"github.com/vtrod/veecomm-api/ent/user"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (oc *OrderCreate) SetUserID(s string) *OrderCreate {
	oc.mutation.SetUserID(s)
	return oc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUserID(s *string) *OrderCreate {
	if s != nil {
		oc.SetUserID(*s)
	}
	return oc
}

// SetDate sets the "date" field.
func (oc *OrderCreate) SetDate(t time.Time) *OrderCreate {
	oc.mutation.SetDate(t)
	return oc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDate(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetDate(*t)
	}
	return oc
}

// SetTotal sets the "total" field.
func (oc *OrderCreate) SetTotal(f float64) *OrderCreate {
	oc.mutation.SetTotal(f)
	return oc
}

// SetShipping sets the "shipping" field.
func (oc *OrderCreate) SetShipping(f float64) *OrderCreate {
	oc.mutation.SetShipping(f)
	return oc
}

// SetNillableShipping sets the "shipping" field if the given value is not nil.
func (oc *OrderCreate) SetNillableShipping(f *float64) *OrderCreate {
	if f != nil {
		oc.SetShipping(*f)
	}
	return oc
}

// SetDiscount sets the "discount" field.
func (oc *OrderCreate) SetDiscount(f float64) *OrderCreate {
	oc.mutation.SetDiscount(f)
	return oc
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDiscount(f *float64) *OrderCreate {
	if f != nil {
		oc.SetDiscount(*f)
	}
	return oc
}

// SetDeliveryType sets the "delivery_type" field.
func (oc *OrderCreate) SetDeliveryType(ot order.DeliveryType) *OrderCreate {
	oc.mutation.SetDeliveryType(ot)
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(o order.Status) *OrderCreate {
	oc.mutation.SetStatus(o)
	return oc
}

// SetAddressID sets the "address_id" field.
func (oc *OrderCreate) SetAddressID(s string) *OrderCreate {
	oc.mutation.SetAddressID(s)
	return oc
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableAddressID(s *string) *OrderCreate {
	if s != nil {
		oc.SetAddressID(*s)
	}
	return oc
}

// SetPaymentMethod sets the "payment_method" field.
func (oc *OrderCreate) SetPaymentMethod(s string) *OrderCreate {
	oc.mutation.SetPaymentMethod(s)
	return oc
}

// SetPaymentStatus sets the "payment_status" field.
func (oc *OrderCreate) SetPaymentStatus(s string) *OrderCreate {
	oc.mutation.SetPaymentStatus(s)
	return oc
}

// SetCouponCode sets the "coupon_code" field.
func (oc *OrderCreate) SetCouponCode(s string) *OrderCreate {
	oc.mutation.SetCouponCode(s)
	return oc
}

// SetNillableCouponCode sets the "coupon_code" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCouponCode(s *string) *OrderCreate {
	if s != nil {
		oc.SetCouponCode(*s)
	}
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(s string) *OrderCreate {
	oc.mutation.SetID(s)
	return oc
}

// SetUser sets the "user" edge to the User entity.
func (oc *OrderCreate) SetUser(u *User) *OrderCreate {
	return oc.SetUserID(u.ID)
}

// SetAddress sets the "address" edge to the Address entity.
func (oc *OrderCreate) SetAddress(a *Address) *OrderCreate {
	return oc.SetAddressID(a.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (oc *OrderCreate) AddOrderItemIDs(ids ...string) *OrderCreate {
	oc.mutation.AddOrderItemIDs(ids...)
	return oc
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (oc *OrderCreate) AddOrderItems(o ...*OrderItem) *OrderCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOrderItemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.Date(); !ok {
		v := order.DefaultDate()
		oc.mutation.SetDate(v)
	}
	if _, ok := oc.mutation.Shipping(); !ok {
		v := order.DefaultShipping
		oc.mutation.SetShipping(v)
	}
	if _, ok := oc.mutation.Discount(); !ok {
		v := order.DefaultDiscount
		oc.mutation.SetDiscount(v)
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Order.date"`)}
	}
	if _, ok := oc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "Order.total"`)}
	}
	if v, ok := oc.mutation.Total(); ok {
		if err := order.TotalValidator(v); err != nil {
			return &ValidationError{Name: "total", err: fmt.Errorf(`ent: validator failed for field "Order.total": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Shipping(); !ok {
		return &ValidationError{Name: "shipping", err: errors.New(`ent: missing required field "Order.shipping"`)}
	}
	if _, ok := oc.mutation.Discount(); !ok {
		return &ValidationError{Name: "discount", err: errors.New(`ent: missing required field "Order.discount"`)}
	}
	if _, ok := oc.mutation.DeliveryType(); !ok {
		return &ValidationError{Name: "delivery_type", err: errors.New(`ent: missing required field "Order.delivery_type"`)}
	}
	if v, ok := oc.mutation.DeliveryType(); ok {
		if err := order.DeliveryTypeValidator(v); err != nil {
			return &ValidationError{Name: "delivery_type", err: fmt.Errorf(`ent: validator failed for field "Order.delivery_type": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Order.status"`)}
	}
	if v, ok := oc.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if _, ok := oc.mutation.PaymentMethod(); !ok {
		return &ValidationError{Name: "payment_method", err: errors.New(`ent: missing required field "Order.payment_method"`)}
	}
	if v, ok := oc.mutation.PaymentMethod(); ok {
		if err := order.PaymentMethodValidator(v); err != nil {
			return &ValidationError{Name: "payment_method", err: fmt.Errorf(`ent: validator failed for field "Order.payment_method": %w`, err)}
		}
	}
	if _, ok := oc.mutation.PaymentStatus(); !ok {
		return &ValidationError{Name: "payment_status", err: errors.New(`ent: missing required field "Order.payment_status"`)}
	}
	if v, ok := oc.mutation.PaymentStatus(); ok {
		if err := order.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Order.payment_status": %w`, err)}
		}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Order.updated_at"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Order.ID type: %T", _spec.ID.Value)
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeString))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.Date(); ok {
		_spec.SetField(order.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := oc.mutation.Total(); ok {
		_spec.SetField(order.FieldTotal, field.TypeFloat64, value)
		_node.Total = value
	}
	if value, ok := oc.mutation.Shipping(); ok {
		_spec.SetField(order.FieldShipping, field.TypeFloat64, value)
		_node.Shipping = value
	}
	if value, ok := oc.mutation.Discount(); ok {
		_spec.SetField(order.FieldDiscount, field.TypeFloat64, value)
		_node.Discount = value
	}
	if value, ok := oc.mutation.DeliveryType(); ok {
		_spec.SetField(order.FieldDeliveryType, field.TypeEnum, value)
		_node.DeliveryType = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.PaymentMethod(); ok {
		_spec.SetField(order.FieldPaymentMethod, field.TypeString, value)
		_node.PaymentMethod = value
	}
	if value, ok := oc.mutation.PaymentStatus(); ok {
		_spec.SetField(order.FieldPaymentStatus, field.TypeString, value)
		_node.PaymentStatus = value
	}
	if value, ok := oc.mutation.CouponCode(); ok {
		_spec.SetField(order.FieldCouponCode, field.TypeString, value)
		_node.CouponCode = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(order.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := oc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserTable,
			Columns: []string{order.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddressTable,
			Columns: []string{order.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AddressID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderItemsTable,
			Columns: []string{order.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
