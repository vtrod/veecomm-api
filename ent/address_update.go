// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vtrod/veecomm-api/ent/address"
	"github.com/vtrod/veecomm-api/ent/order"
	"github.com/vtrod/veecomm-api/ent/predicate"
	"github.com/vtrod/veecomm-api/ent/user"
)

// AddressUpdate is the builder for updating Address entities.
type AddressUpdate struct {
	config
	hooks    []Hook
	mutation *AddressMutation
}

// Where appends a list predicates to the AddressUpdate builder.
func (au *AddressUpdate) Where(ps ...predicate.Address) *AddressUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUserID sets the "user_id" field.
func (au *AddressUpdate) SetUserID(s string) *AddressUpdate {
	au.mutation.SetUserID(s)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AddressUpdate) SetNillableUserID(s *string) *AddressUpdate {
	if s != nil {
		au.SetUserID(*s)
	}
	return au
}

// ClearUserID clears the value of the "user_id" field.
func (au *AddressUpdate) ClearUserID() *AddressUpdate {
	au.mutation.ClearUserID()
	return au
}

// SetCep sets the "cep" field.
func (au *AddressUpdate) SetCep(s string) *AddressUpdate {
	au.mutation.SetCep(s)
	return au
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCep(s *string) *AddressUpdate {
	if s != nil {
		au.SetCep(*s)
	}
	return au
}

// SetLogradouro sets the "logradouro" field.
func (au *AddressUpdate) SetLogradouro(s string) *AddressUpdate {
	au.mutation.SetLogradouro(s)
	return au
}

// SetNillableLogradouro sets the "logradouro" field if the given value is not nil.
func (au *AddressUpdate) SetNillableLogradouro(s *string) *AddressUpdate {
	if s != nil {
		au.SetLogradouro(*s)
	}
	return au
}

// SetNumero sets the "numero" field.
func (au *AddressUpdate) SetNumero(s string) *AddressUpdate {
	au.mutation.SetNumero(s)
	return au
}

// SetNillableNumero sets the "numero" field if the given value is not nil.
func (au *AddressUpdate) SetNillableNumero(s *string) *AddressUpdate {
	if s != nil {
		au.SetNumero(*s)
	}
	return au
}

// SetComplemento sets the "complemento" field.
func (au *AddressUpdate) SetComplemento(s string) *AddressUpdate {
	au.mutation.SetComplemento(s)
	return au
}

// SetNillableComplemento sets the "complemento" field if the given value is not nil.
func (au *AddressUpdate) SetNillableComplemento(s *string) *AddressUpdate {
	if s != nil {
		au.SetComplemento(*s)
	}
	return au
}

// ClearComplemento clears the value of the "complemento" field.
func (au *AddressUpdate) ClearComplemento() *AddressUpdate {
	au.mutation.ClearComplemento()
	return au
}

// SetBairro sets the "bairro" field.
func (au *AddressUpdate) SetBairro(s string) *AddressUpdate {
	au.mutation.SetBairro(s)
	return au
}

// SetNillableBairro sets the "bairro" field if the given value is not nil.
func (au *AddressUpdate) SetNillableBairro(s *string) *AddressUpdate {
	if s != nil {
		au.SetBairro(*s)
	}
	return au
}

// SetCidade sets the "cidade" field.
func (au *AddressUpdate) SetCidade(s string) *AddressUpdate {
	au.mutation.SetCidade(s)
	return au
}

// SetNillableCidade sets the "cidade" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCidade(s *string) *AddressUpdate {
	if s != nil {
		au.SetCidade(*s)
	}
	return au
}

// SetEstado sets the "estado" field.
func (au *AddressUpdate) SetEstado(s string) *AddressUpdate {
	au.mutation.SetEstado(s)
	return au
}

// SetNillableEstado sets the "estado" field if the given value is not nil.
func (au *AddressUpdate) SetNillableEstado(s *string) *AddressUpdate {
	if s != nil {
		au.SetEstado(*s)
	}
	return au
}

// SetIsDefault sets the "is_default" field.
func (au *AddressUpdate) SetIsDefault(b bool) *AddressUpdate {
	au.mutation.SetIsDefault(b)
	return au
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (au *AddressUpdate) SetNillableIsDefault(b *bool) *AddressUpdate {
	if b != nil {
		au.SetIsDefault(*b)
	}
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AddressUpdate) SetCreatedAt(t time.Time) *AddressUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCreatedAt(t *time.Time) *AddressUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AddressUpdate) SetUpdatedAt(t time.Time) *AddressUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *AddressUpdate) SetUser(u *User) *AddressUpdate {
	return au.SetUserID(u.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (au *AddressUpdate) AddOrderIDs(ids ...string) *AddressUpdate {
	au.mutation.AddOrderIDs(ids...)
	return au
}

// AddOrders adds the "orders" edges to the Order entity.
func (au *AddressUpdate) AddOrders(o ...*Order) *AddressUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddOrderIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (au *AddressUpdate) Mutation() *AddressMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *AddressUpdate) ClearUser() *AddressUpdate {
	au.mutation.ClearUser()
	return au
}

// ClearOrders clears all "orders" edges to the Order entity.
func (au *AddressUpdate) ClearOrders() *AddressUpdate {
	au.mutation.ClearOrders()
	return au
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (au *AddressUpdate) RemoveOrderIDs(ids ...string) *AddressUpdate {
	au.mutation.RemoveOrderIDs(ids...)
	return au
}

// RemoveOrders removes "orders" edges to Order entities.
func (au *AddressUpdate) RemoveOrders(o ...*Order) *AddressUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddressUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddressUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddressUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddressUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AddressUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := address.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AddressUpdate) check() error {
	if v, ok := au.mutation.Cep(); ok {
		if err := address.CepValidator(v); err != nil {
			return &ValidationError{Name: "cep", err: fmt.Errorf(`ent: validator failed for field "Address.cep": %w`, err)}
		}
	}
	if v, ok := au.mutation.Logradouro(); ok {
		if err := address.LogradouroValidator(v); err != nil {
			return &ValidationError{Name: "logradouro", err: fmt.Errorf(`ent: validator failed for field "Address.logradouro": %w`, err)}
		}
	}
	if v, ok := au.mutation.Numero(); ok {
		if err := address.NumeroValidator(v); err != nil {
			return &ValidationError{Name: "numero", err: fmt.Errorf(`ent: validator failed for field "Address.numero": %w`, err)}
		}
	}
	if v, ok := au.mutation.Bairro(); ok {
		if err := address.BairroValidator(v); err != nil {
			return &ValidationError{Name: "bairro", err: fmt.Errorf(`ent: validator failed for field "Address.bairro": %w`, err)}
		}
	}
	if v, ok := au.mutation.Cidade(); ok {
		if err := address.CidadeValidator(v); err != nil {
			return &ValidationError{Name: "cidade", err: fmt.Errorf(`ent: validator failed for field "Address.cidade": %w`, err)}
		}
	}
	if v, ok := au.mutation.Estado(); ok {
		if err := address.EstadoValidator(v); err != nil {
			return &ValidationError{Name: "estado", err: fmt.Errorf(`ent: validator failed for field "Address.estado": %w`, err)}
		}
	}
	return nil
}

func (au *AddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Cep(); ok {
		_spec.SetField(address.FieldCep, field.TypeString, value)
	}
	if value, ok := au.mutation.Logradouro(); ok {
		_spec.SetField(address.FieldLogradouro, field.TypeString, value)
	}
	if value, ok := au.mutation.Numero(); ok {
		_spec.SetField(address.FieldNumero, field.TypeString, value)
	}
	if value, ok := au.mutation.Complemento(); ok {
		_spec.SetField(address.FieldComplemento, field.TypeString, value)
	}
	if au.mutation.ComplementoCleared() {
		_spec.ClearField(address.FieldComplemento, field.TypeString)
	}
	if value, ok := au.mutation.Bairro(); ok {
		_spec.SetField(address.FieldBairro, field.TypeString, value)
	}
	if value, ok := au.mutation.Cidade(); ok {
		_spec.SetField(address.FieldCidade, field.TypeString, value)
	}
	if value, ok := au.mutation.Estado(); ok {
		_spec.SetField(address.FieldEstado, field.TypeString, value)
	}
	if value, ok := au.mutation.IsDefault(); ok {
		_spec.SetField(address.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(address.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(address.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.UserTable,
			Columns: []string{address.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.UserTable,
			Columns: []string{address.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !au.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AddressUpdateOne is the builder for updating a single Address entity.
type AddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressMutation
}

// SetUserID sets the "user_id" field.
func (auo *AddressUpdateOne) SetUserID(s string) *AddressUpdateOne {
	auo.mutation.SetUserID(s)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableUserID(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetUserID(*s)
	}
	return auo
}

// ClearUserID clears the value of the "user_id" field.
func (auo *AddressUpdateOne) ClearUserID() *AddressUpdateOne {
	auo.mutation.ClearUserID()
	return auo
}

// SetCep sets the "cep" field.
func (auo *AddressUpdateOne) SetCep(s string) *AddressUpdateOne {
	auo.mutation.SetCep(s)
	return auo
}

// SetNillableCep sets the "cep" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCep(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetCep(*s)
	}
	return auo
}

// SetLogradouro sets the "logradouro" field.
func (auo *AddressUpdateOne) SetLogradouro(s string) *AddressUpdateOne {
	auo.mutation.SetLogradouro(s)
	return auo
}

// SetNillableLogradouro sets the "logradouro" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableLogradouro(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetLogradouro(*s)
	}
	return auo
}

// SetNumero sets the "numero" field.
func (auo *AddressUpdateOne) SetNumero(s string) *AddressUpdateOne {
	auo.mutation.SetNumero(s)
	return auo
}

// SetNillableNumero sets the "numero" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableNumero(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetNumero(*s)
	}
	return auo
}

// SetComplemento sets the "complemento" field.
func (auo *AddressUpdateOne) SetComplemento(s string) *AddressUpdateOne {
	auo.mutation.SetComplemento(s)
	return auo
}

// SetNillableComplemento sets the "complemento" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableComplemento(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetComplemento(*s)
	}
	return auo
}

// ClearComplemento clears the value of the "complemento" field.
func (auo *AddressUpdateOne) ClearComplemento() *AddressUpdateOne {
	auo.mutation.ClearComplemento()
	return auo
}

// SetBairro sets the "bairro" field.
func (auo *AddressUpdateOne) SetBairro(s string) *AddressUpdateOne {
	auo.mutation.SetBairro(s)
	return auo
}

// SetNillableBairro sets the "bairro" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableBairro(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetBairro(*s)
	}
	return auo
}

// SetCidade sets the "cidade" field.
func (auo *AddressUpdateOne) SetCidade(s string) *AddressUpdateOne {
	auo.mutation.SetCidade(s)
	return auo
}

// SetNillableCidade sets the "cidade" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCidade(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetCidade(*s)
	}
	return auo
}

// SetEstado sets the "estado" field.
func (auo *AddressUpdateOne) SetEstado(s string) *AddressUpdateOne {
	auo.mutation.SetEstado(s)
	return auo
}

// SetNillableEstado sets the "estado" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableEstado(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetEstado(*s)
	}
	return auo
}

// SetIsDefault sets the "is_default" field.
func (auo *AddressUpdateOne) SetIsDefault(b bool) *AddressUpdateOne {
	auo.mutation.SetIsDefault(b)
	return auo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableIsDefault(b *bool) *AddressUpdateOne {
	if b != nil {
		auo.SetIsDefault(*b)
	}
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AddressUpdateOne) SetCreatedAt(t time.Time) *AddressUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCreatedAt(t *time.Time) *AddressUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AddressUpdateOne) SetUpdatedAt(t time.Time) *AddressUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *AddressUpdateOne) SetUser(u *User) *AddressUpdateOne {
	return auo.SetUserID(u.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (auo *AddressUpdateOne) AddOrderIDs(ids ...string) *AddressUpdateOne {
	auo.mutation.AddOrderIDs(ids...)
	return auo
}

// AddOrders adds the "orders" edges to the Order entity.
func (auo *AddressUpdateOne) AddOrders(o ...*Order) *AddressUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddOrderIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (auo *AddressUpdateOne) Mutation() *AddressMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AddressUpdateOne) ClearUser() *AddressUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// ClearOrders clears all "orders" edges to the Order entity.
func (auo *AddressUpdateOne) ClearOrders() *AddressUpdateOne {
	auo.mutation.ClearOrders()
	return auo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (auo *AddressUpdateOne) RemoveOrderIDs(ids ...string) *AddressUpdateOne {
	auo.mutation.RemoveOrderIDs(ids...)
	return auo
}

// RemoveOrders removes "orders" edges to Order entities.
func (auo *AddressUpdateOne) RemoveOrders(o ...*Order) *AddressUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the AddressUpdate builder.
func (auo *AddressUpdateOne) Where(ps ...predicate.Address) *AddressUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddressUpdateOne) Select(field string, fields ...string) *AddressUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Address entity.
func (auo *AddressUpdateOne) Save(ctx context.Context) (*Address, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddressUpdateOne) SaveX(ctx context.Context) *Address {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddressUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddressUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AddressUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := address.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AddressUpdateOne) check() error {
	if v, ok := auo.mutation.Cep(); ok {
		if err := address.CepValidator(v); err != nil {
			return &ValidationError{Name: "cep", err: fmt.Errorf(`ent: validator failed for field "Address.cep": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Logradouro(); ok {
		if err := address.LogradouroValidator(v); err != nil {
			return &ValidationError{Name: "logradouro", err: fmt.Errorf(`ent: validator failed for field "Address.logradouro": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Numero(); ok {
		if err := address.NumeroValidator(v); err != nil {
			return &ValidationError{Name: "numero", err: fmt.Errorf(`ent: validator failed for field "Address.numero": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Bairro(); ok {
		if err := address.BairroValidator(v); err != nil {
			return &ValidationError{Name: "bairro", err: fmt.Errorf(`ent: validator failed for field "Address.bairro": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Cidade(); ok {
		if err := address.CidadeValidator(v); err != nil {
			return &ValidationError{Name: "cidade", err: fmt.Errorf(`ent: validator failed for field "Address.cidade": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Estado(); ok {
		if err := address.EstadoValidator(v); err != nil {
			return &ValidationError{Name: "estado", err: fmt.Errorf(`ent: validator failed for field "Address.estado": %w`, err)}
		}
	}
	return nil
}

func (auo *AddressUpdateOne) sqlSave(ctx context.Context) (_node *Address, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Address.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for _, f := range fields {
			if !address.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Cep(); ok {
		_spec.SetField(address.FieldCep, field.TypeString, value)
	}
	if value, ok := auo.mutation.Logradouro(); ok {
		_spec.SetField(address.FieldLogradouro, field.TypeString, value)
	}
	if value, ok := auo.mutation.Numero(); ok {
		_spec.SetField(address.FieldNumero, field.TypeString, value)
	}
	if value, ok := auo.mutation.Complemento(); ok {
		_spec.SetField(address.FieldComplemento, field.TypeString, value)
	}
	if auo.mutation.ComplementoCleared() {
		_spec.ClearField(address.FieldComplemento, field.TypeString)
	}
	if value, ok := auo.mutation.Bairro(); ok {
		_spec.SetField(address.FieldBairro, field.TypeString, value)
	}
	if value, ok := auo.mutation.Cidade(); ok {
		_spec.SetField(address.FieldCidade, field.TypeString, value)
	}
	if value, ok := auo.mutation.Estado(); ok {
		_spec.SetField(address.FieldEstado, field.TypeString, value)
	}
	if value, ok := auo.mutation.IsDefault(); ok {
		_spec.SetField(address.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(address.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(address.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.UserTable,
			Columns: []string{address.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.UserTable,
			Columns: []string{address.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !auo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.OrdersTable,
			Columns: []string{address.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Address{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
