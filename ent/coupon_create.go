// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vtrod/veecomm-api/ent/coupon"
)

// CouponCreate is the builder for creating a Coupon entity.
type CouponCreate struct {
	config
	mutation *CouponMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (cc *CouponCreate) SetCode(s string) *CouponCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetType sets the "type" field.
func (cc *CouponCreate) SetType(c coupon.Type) *CouponCreate {
	cc.mutation.SetType(c)
	return cc
}

// SetValue sets the "value" field.
func (cc *CouponCreate) SetValue(f float64) *CouponCreate {
	cc.mutation.SetValue(f)
	return cc
}

// SetMinPurchase sets the "min_purchase" field.
func (cc *CouponCreate) SetMinPurchase(f float64) *CouponCreate {
	cc.mutation.SetMinPurchase(f)
	return cc
}

// SetNillableMinPurchase sets the "min_purchase" field if the given value is not nil.
func (cc *CouponCreate) SetNillableMinPurchase(f *float64) *CouponCreate {
	if f != nil {
		cc.SetMinPurchase(*f)
	}
	return cc
}

// SetUsageLimit sets the "usage_limit" field.
func (cc *CouponCreate) SetUsageLimit(i int) *CouponCreate {
	cc.mutation.SetUsageLimit(i)
	return cc
}

// SetNillableUsageLimit sets the "usage_limit" field if the given value is not nil.
func (cc *CouponCreate) SetNillableUsageLimit(i *int) *CouponCreate {
	if i != nil {
		cc.SetUsageLimit(*i)
	}
	return cc
}

// SetUsedCount sets the "used_count" field.
func (cc *CouponCreate) SetUsedCount(i int) *CouponCreate {
	cc.mutation.SetUsedCount(i)
	return cc
}

// SetNillableUsedCount sets the "used_count" field if the given value is not nil.
func (cc *CouponCreate) SetNillableUsedCount(i *int) *CouponCreate {
	if i != nil {
		cc.SetUsedCount(*i)
	}
	return cc
}

// SetExpiresAt sets the "expires_at" field.
func (cc *CouponCreate) SetExpiresAt(t time.Time) *CouponCreate {
	cc.mutation.SetExpiresAt(t)
	return cc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableExpiresAt(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetExpiresAt(*t)
	}
	return cc
}

// SetActive sets the "active" field.
func (cc *CouponCreate) SetActive(b bool) *CouponCreate {
	cc.mutation.SetActive(b)
	return cc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (cc *CouponCreate) SetNillableActive(b *bool) *CouponCreate {
	if b != nil {
		cc.SetActive(*b)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CouponCreate) SetCreatedAt(t time.Time) *CouponCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCreatedAt(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CouponCreate) SetUpdatedAt(t time.Time) *CouponCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableUpdatedAt(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CouponCreate) SetID(s string) *CouponCreate {
	cc.mutation.SetID(s)
	return cc
}

// Mutation returns the CouponMutation object of the builder.
func (cc *CouponCreate) Mutation() *CouponMutation {
	return cc.mutation
}

// Save creates the Coupon in the database.
func (cc *CouponCreate) Save(ctx context.Context) (*Coupon, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CouponCreate) SaveX(ctx context.Context) *Coupon {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CouponCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CouponCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CouponCreate) defaults() {
	if _, ok := cc.mutation.UsedCount(); !ok {
		v := coupon.DefaultUsedCount
		cc.mutation.SetUsedCount(v)
	}
	if _, ok := cc.mutation.Active(); !ok {
		v := coupon.DefaultActive
		cc.mutation.SetActive(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := coupon.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := coupon.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CouponCreate) check() error {
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Coupon.code"`)}
	}
	if v, ok := cc.mutation.Code(); ok {
		if err := coupon.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Coupon.code": %w`, err)}
		}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Coupon.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := coupon.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Coupon.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Coupon.value"`)}
	}
	if v, ok := cc.mutation.Value(); ok {
		if err := coupon.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Coupon.value": %w`, err)}
		}
	}
	if _, ok := cc.mutation.UsedCount(); !ok {
		return &ValidationError{Name: "used_count", err: errors.New(`ent: missing required field "Coupon.used_count"`)}
	}
	if _, ok := cc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Coupon.active"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Coupon.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Coupon.updated_at"`)}
	}
	return nil
}

func (cc *CouponCreate) sqlSave(ctx context.Context) (*Coupon, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Coupon.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CouponCreate) createSpec() (*Coupon, *sqlgraph.CreateSpec) {
	var (
		_node = &Coupon{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(coupon.Table, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.SetField(coupon.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(coupon.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Value(); ok {
		_spec.SetField(coupon.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := cc.mutation.MinPurchase(); ok {
		_spec.SetField(coupon.FieldMinPurchase, field.TypeFloat64, value)
		_node.MinPurchase = value
	}
	if value, ok := cc.mutation.UsageLimit(); ok {
		_spec.SetField(coupon.FieldUsageLimit, field.TypeInt, value)
		_node.UsageLimit = value
	}
	if value, ok := cc.mutation.UsedCount(); ok {
		_spec.SetField(coupon.FieldUsedCount, field.TypeInt, value)
		_node.UsedCount = value
	}
	if value, ok := cc.mutation.ExpiresAt(); ok {
		_spec.SetField(coupon.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := cc.mutation.Active(); ok {
		_spec.SetField(coupon.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(coupon.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CouponCreateBulk is the builder for creating many Coupon entities in bulk.
type CouponCreateBulk struct {
	config
	err      error
	builders []*CouponCreate
}

// Save creates the Coupon entities in the database.
func (ccb *CouponCreateBulk) Save(ctx context.Context) ([]*Coupon, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Coupon, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CouponCreateBulk) SaveX(ctx context.Context) []*Coupon {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CouponCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CouponCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
