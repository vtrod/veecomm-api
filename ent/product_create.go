// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vtrod/veecomm-api/ent/avaliation"
	"github.com/vtrod/veecomm-api/ent/cartitem"
	"github.com/vtrod/veecomm-api/ent/category"
	"github.com/vtrod/veecomm-api/ent/orderitem"
	"github.com/vtrod/veecomm-api/ent/product"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetSlug sets the "slug" field.
func (pc *ProductCreate) SetSlug(s string) *ProductCreate {
	pc.mutation.SetSlug(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProductCreate) SetDescription(s string) *ProductCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetPrice sets the "price" field.
func (pc *ProductCreate) SetPrice(f float64) *ProductCreate {
	pc.mutation.SetPrice(f)
	return pc
}

// SetSalePrice sets the "sale_price" field.
func (pc *ProductCreate) SetSalePrice(f float64) *ProductCreate {
	pc.mutation.SetSalePrice(f)
	return pc
}

// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
func (pc *ProductCreate) SetNillableSalePrice(f *float64) *ProductCreate {
	if f != nil {
		pc.SetSalePrice(*f)
	}
	return pc
}

// SetOnSale sets the "on_sale" field.
func (pc *ProductCreate) SetOnSale(b bool) *ProductCreate {
	pc.mutation.SetOnSale(b)
	return pc
}

// SetNillableOnSale sets the "on_sale" field if the given value is not nil.
func (pc *ProductCreate) SetNillableOnSale(b *bool) *ProductCreate {
	if b != nil {
		pc.SetOnSale(*b)
	}
	return pc
}

// SetStock sets the "stock" field.
func (pc *ProductCreate) SetStock(i int) *ProductCreate {
	pc.mutation.SetStock(i)
	return pc
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (pc *ProductCreate) SetNillableStock(i *int) *ProductCreate {
	if i != nil {
		pc.SetStock(*i)
	}
	return pc
}

// SetSku sets the "sku" field.
func (pc *ProductCreate) SetSku(s string) *ProductCreate {
	pc.mutation.SetSku(s)
	return pc
}

// SetCategoryID sets the "category_id" field.
func (pc *ProductCreate) SetCategoryID(s string) *ProductCreate {
	pc.mutation.SetCategoryID(s)
	return pc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCategoryID(s *string) *ProductCreate {
	if s != nil {
		pc.SetCategoryID(*s)
	}
	return pc
}

// SetImages sets the "images" field.
func (pc *ProductCreate) SetImages(s []string) *ProductCreate {
	pc.mutation.SetImages(s)
	return pc
}

// SetRating sets the "rating" field.
func (pc *ProductCreate) SetRating(f float64) *ProductCreate {
	pc.mutation.SetRating(f)
	return pc
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (pc *ProductCreate) SetNillableRating(f *float64) *ProductCreate {
	if f != nil {
		pc.SetRating(*f)
	}
	return pc
}

// SetReviewCount sets the "review_count" field.
func (pc *ProductCreate) SetReviewCount(i int) *ProductCreate {
	pc.mutation.SetReviewCount(i)
	return pc
}

// SetNillableReviewCount sets the "review_count" field if the given value is not nil.
func (pc *ProductCreate) SetNillableReviewCount(i *int) *ProductCreate {
	if i != nil {
		pc.SetReviewCount(*i)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProductCreate) SetCreatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProductCreate) SetUpdatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProductCreate) SetID(s string) *ProductCreate {
	pc.mutation.SetID(s)
	return pc
}

// AddAvaliationIDs adds the "avaliations" edge to the Avaliation entity by IDs.
func (pc *ProductCreate) AddAvaliationIDs(ids ...string) *ProductCreate {
	pc.mutation.AddAvaliationIDs(ids...)
	return pc
}

// AddAvaliations adds the "avaliations" edges to the Avaliation entity.
func (pc *ProductCreate) AddAvaliations(a ...*Avaliation) *ProductCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddAvaliationIDs(ids...)
}

// SetCategory sets the "category" edge to the Category entity.
func (pc *ProductCreate) SetCategory(c *Category) *ProductCreate {
	return pc.SetCategoryID(c.ID)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (pc *ProductCreate) AddOrderItemIDs(ids ...string) *ProductCreate {
	pc.mutation.AddOrderItemIDs(ids...)
	return pc
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (pc *ProductCreate) AddOrderItems(o ...*OrderItem) *ProductCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddOrderItemIDs(ids...)
}

// AddCartItemIDs adds the "cart_items" edge to the CartItem entity by IDs.
func (pc *ProductCreate) AddCartItemIDs(ids ...string) *ProductCreate {
	pc.mutation.AddCartItemIDs(ids...)
	return pc
}

// AddCartItems adds the "cart_items" edges to the CartItem entity.
func (pc *ProductCreate) AddCartItems(c ...*CartItem) *ProductCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCartItemIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.OnSale(); !ok {
		v := product.DefaultOnSale
		pc.mutation.SetOnSale(v)
	}
	if _, ok := pc.mutation.Stock(); !ok {
		v := product.DefaultStock
		pc.mutation.SetStock(v)
	}
	if _, ok := pc.mutation.Images(); !ok {
		v := product.DefaultImages
		pc.mutation.SetImages(v)
	}
	if _, ok := pc.mutation.Rating(); !ok {
		v := product.DefaultRating
		pc.mutation.SetRating(v)
	}
	if _, ok := pc.mutation.ReviewCount(); !ok {
		v := product.DefaultReviewCount
		pc.mutation.SetReviewCount(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := product.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := product.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Product.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Product.slug"`)}
	}
	if v, ok := pc.mutation.Slug(); ok {
		if err := product.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Product.slug": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Product.description"`)}
	}
	if v, ok := pc.mutation.Description(); ok {
		if err := product.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Product.description": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Product.price"`)}
	}
	if v, ok := pc.mutation.Price(); ok {
		if err := product.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Product.price": %w`, err)}
		}
	}
	if _, ok := pc.mutation.OnSale(); !ok {
		return &ValidationError{Name: "on_sale", err: errors.New(`ent: missing required field "Product.on_sale"`)}
	}
	if _, ok := pc.mutation.Stock(); !ok {
		return &ValidationError{Name: "stock", err: errors.New(`ent: missing required field "Product.stock"`)}
	}
	if _, ok := pc.mutation.Sku(); !ok {
		return &ValidationError{Name: "sku", err: errors.New(`ent: missing required field "Product.sku"`)}
	}
	if v, ok := pc.mutation.Sku(); ok {
		if err := product.SkuValidator(v); err != nil {
			return &ValidationError{Name: "sku", err: fmt.Errorf(`ent: validator failed for field "Product.sku": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Images(); !ok {
		return &ValidationError{Name: "images", err: errors.New(`ent: missing required field "Product.images"`)}
	}
	if _, ok := pc.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "Product.rating"`)}
	}
	if _, ok := pc.mutation.ReviewCount(); !ok {
		return &ValidationError{Name: "review_count", err: errors.New(`ent: missing required field "Product.review_count"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Product.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Product.updated_at"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Product.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Slug(); ok {
		_spec.SetField(product.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(product.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := pc.mutation.SalePrice(); ok {
		_spec.SetField(product.FieldSalePrice, field.TypeFloat64, value)
		_node.SalePrice = value
	}
	if value, ok := pc.mutation.OnSale(); ok {
		_spec.SetField(product.FieldOnSale, field.TypeBool, value)
		_node.OnSale = value
	}
	if value, ok := pc.mutation.Stock(); ok {
		_spec.SetField(product.FieldStock, field.TypeInt, value)
		_node.Stock = value
	}
	if value, ok := pc.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
		_node.Sku = value
	}
	if value, ok := pc.mutation.Images(); ok {
		_spec.SetField(product.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := pc.mutation.Rating(); ok {
		_spec.SetField(product.FieldRating, field.TypeFloat64, value)
		_node.Rating = value
	}
	if value, ok := pc.mutation.ReviewCount(); ok {
		_spec.SetField(product.FieldReviewCount, field.TypeInt, value)
		_node.ReviewCount = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.AvaliationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.AvaliationsTable,
			Columns: []string{product.AvaliationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(avaliation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderItemsTable,
			Columns: []string{product.OrderItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CartItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.CartItemsTable,
			Columns: []string{product.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	err      error
	builders []*ProductCreate
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
